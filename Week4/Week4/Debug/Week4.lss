
Week4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000140  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  0000016f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000aef  00000000  00000000  0000019f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000083b  00000000  00000000  00000c8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002ae  00000000  00000000  000014c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000044  00000000  00000000  00001778  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  000017bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000006a  00000000  00000000  00001a39  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  00001aa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000000e8  000000e8  0000013c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001ac4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.adcInit 0000000a  000000de  000000de  00000132  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.wait    0000001e  000000a4  000000a4  000000f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    0000001c  000000c2  000000c2  00000116  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
   8:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
   c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  10:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  14:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  18:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  1c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  20:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  24:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  28:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  2c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  30:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  34:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  38:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  3c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  40:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  44:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  48:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  4c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  50:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  54:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  58:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  5c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  60:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  64:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  68:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  6c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  70:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  74:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  78:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  7c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  80:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  84:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  88:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

000000e8 <__bad_interrupt>:
  e8:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.adcInit:

000000de <adcInit>:
}

// Initialize ADC: 10-bits (left justified), free running
void adcInit( void )
{
	ADMUX = 0b01100011;			// AREF=VCC, result left adjusted, channel1 at pin PF1
  de:	83 e6       	ldi	r24, 0x63	; 99
  e0:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b11100110;		// ADC-enable, no interrupt, start, free running, division by 64
  e2:	86 ee       	ldi	r24, 0xE6	; 230
  e4:	86 b9       	out	0x06, r24	; 6
  e6:	08 95       	ret

Disassembly of section .text.wait:

000000a4 <wait>:
}

void wait( int ms )
{
	for (int tms=0; tms<ms; tms++)
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	08 c0       	rjmp	.+16     	; 0xba <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	ef ec       	ldi	r30, 0xCF	; 207
  ac:	f7 e0       	ldi	r31, 0x07	; 7
  ae:	31 97       	sbiw	r30, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <wait+0xa>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <wait+0x10>
  b4:	00 00       	nop
  b6:	2f 5f       	subi	r18, 0xFF	; 255
  b8:	3f 4f       	sbci	r19, 0xFF	; 255
  ba:	28 17       	cp	r18, r24
  bc:	39 07       	cpc	r19, r25
  be:	ac f3       	brlt	.-22     	; 0xaa <wait+0x6>
	{
		_delay_ms( 1 );			// library function (max 30 ms at 8MHz)
	}
  c0:	08 95       	ret

Disassembly of section .text.main:

000000c2 <main>:
void adcInit( void );

// Main program: ADC at PF1
int main( void )
{
	DDRF = 0x00;				// set PORTF for input (ADC)
  c2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRA = 0xFF;				// set PORTA for output
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;				// set PORTB for output
  ca:	87 bb       	out	0x17, r24	; 23
	adcInit();					// initialize ADC
  cc:	0e 94 6f 00 	call	0xde	; 0xde <adcInit>

	while (1)
	{
		//PORTB = ADCL;			// Show MSB/LSB (bit 10:0) of ADC
		PORTA = ADCH;
  d0:	85 b1       	in	r24, 0x05	; 5
  d2:	8b bb       	out	0x1b, r24	; 27
		wait(100);				// every 100 ms (busy waiting)
  d4:	84 e6       	ldi	r24, 0x64	; 100
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 52 00 	call	0xa4	; 0xa4 <__data_load_end>
  dc:	f9 cf       	rjmp	.-14     	; 0xd0 <main+0xe>
