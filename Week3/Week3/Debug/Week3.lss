
Week3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000025a  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000025a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  00000289  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000cd6  00000000  00000000  000002c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000008de  00000000  00000000  00000f9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000036d  00000000  00000000  0000187d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000094  00000000  00000000  00001bec  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002a6  00000000  00000000  00001c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000017d  00000000  00000000  00001f26  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  000020a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000001be  000001be  00000252  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000020d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.wait    0000001e  0000017a  0000017a  0000020e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.timer2Init 0000000e  000001b0  000001b0  00000244  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_9 0000008a  000000f0  000000f0  00000184  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    00000018  00000198  00000198  0000022c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .bss.state    00000002  00800100  00800100  0000025a  2**0
                  ALLOC
 18 .data.TimerPreset2 00000002  00800102  000001c2  00000256  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 19 .data.TimerPreset1 00000002  00800104  000001c4  00000258  2**0
                  CONTENTS, ALLOC, LOAD, DATA

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
   8:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
   c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  10:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  14:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  18:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  1c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  20:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  24:	0c 94 78 00 	jmp	0xf0	; 0xf0 <_etext>
  28:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  2c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  30:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  34:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  38:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  3c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  40:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  44:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  48:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  4c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  50:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  54:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  58:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  5c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  60:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  64:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  68:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  6c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  70:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  74:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  78:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  7c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  80:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  84:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  88:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 02       	muls	r16, r17
  90:	80 01       	movw	r16, r0
  92:	02 01       	movw	r0, r4
  94:	06 00       	.word	0x0006	; ????
  96:	01 c2       	rjmp	.+1026   	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e1       	ldi	r29, 0x10	; 16
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	ec e8       	ldi	r30, 0x8C	; 140
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	19 c0       	rjmp	.+50     	; 0xde <__do_clear_bss+0x8>
  ac:	b7 91       	elpm	r27, Z+
  ae:	a7 91       	elpm	r26, Z+
  b0:	37 91       	elpm	r19, Z+
  b2:	27 91       	elpm	r18, Z+
  b4:	07 91       	elpm	r16, Z+
  b6:	07 fd       	sbrc	r16, 7
  b8:	0e c0       	rjmp	.+28     	; 0xd6 <__do_clear_bss>
  ba:	97 91       	elpm	r25, Z+
  bc:	87 91       	elpm	r24, Z+
  be:	ef 01       	movw	r28, r30
  c0:	f9 2f       	mov	r31, r25
  c2:	e8 2f       	mov	r30, r24
  c4:	0b bf       	out	0x3b, r16	; 59
  c6:	07 90       	elpm	r0, Z+
  c8:	0d 92       	st	X+, r0
  ca:	a2 17       	cp	r26, r18
  cc:	b3 07       	cpc	r27, r19
  ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0x22>
  d0:	fe 01       	movw	r30, r28
  d2:	1b be       	out	0x3b, r1	; 59
  d4:	04 c0       	rjmp	.+8      	; 0xde <__do_clear_bss+0x8>

000000d6 <__do_clear_bss>:
  d6:	1d 92       	st	X+, r1
  d8:	a2 17       	cp	r26, r18
  da:	b3 07       	cpc	r27, r19
  dc:	e1 f7       	brne	.-8      	; 0xd6 <__do_clear_bss>
  de:	e8 39       	cpi	r30, 0x98	; 152
  e0:	f4 07       	cpc	r31, r20
  e2:	21 f7       	brne	.-56     	; 0xac <__do_copy_data+0x8>
  e4:	0e 94 cc 00 	call	0x198	; 0x198 <main>
  e8:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>

Disassembly of section .text:

000001be <__bad_interrupt>:
 1be:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.wait:

0000017a <wait>:
#define BIT(x)			(1 << (x))

// wait(): busy waiting for 'ms' millisecond
// Used library: util/delay.h
void wait( int ms ) {
	for (int tms=0; tms<ms; tms++) {
 17a:	20 e0       	ldi	r18, 0x00	; 0
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	08 c0       	rjmp	.+16     	; 0x190 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 180:	ef ec       	ldi	r30, 0xCF	; 207
 182:	f7 e0       	ldi	r31, 0x07	; 7
 184:	31 97       	sbiw	r30, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <wait+0xa>
 188:	00 c0       	rjmp	.+0      	; 0x18a <wait+0x10>
 18a:	00 00       	nop
 18c:	2f 5f       	subi	r18, 0xFF	; 255
 18e:	3f 4f       	sbci	r19, 0xFF	; 255
 190:	28 17       	cp	r18, r24
 192:	39 07       	cpc	r19, r25
 194:	ac f3       	brlt	.-22     	; 0x180 <wait+0x6>
		_delay_ms( 1 );			// library function (max 30 ms at 8MHz)
	}
}
 196:	08 95       	ret

Disassembly of section .text.timer2Init:

000001b0 <timer2Init>:


void timer2Init( void ) {
	//OCR2 = 250;				// Compare value of counter 2
	TIMSK |= BIT(7);		// T2 compare match interrupt enable
 1b0:	87 b7       	in	r24, 0x37	; 55
 1b2:	80 68       	ori	r24, 0x80	; 128
 1b4:	87 bf       	out	0x37, r24	; 55
	sei();					// turn_on intr all
 1b6:	78 94       	sei
	TCCR2 = 0b00001101;		// Initialize T2: timer, prescaler=1024, compare output disconnected,CTC,RUN
 1b8:	8d e0       	ldi	r24, 0x0D	; 13
 1ba:	85 bd       	out	0x25, r24	; 37
 1bc:	08 95       	ret

Disassembly of section .text.__vector_9:

000000f0 <__vector_9>:
}

volatile int TimerPreset1 = -195;
volatile int TimerPreset2 = -117;
volatile int state = 0;
ISR( TIMER2_COMP_vect ) {
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	2f 93       	push	r18
  fc:	3f 93       	push	r19
  fe:	8f 93       	push	r24
 100:	9f 93       	push	r25
	if (state) {
 102:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 106:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 10a:	89 2b       	or	r24, r25
 10c:	b9 f0       	breq	.+46     	; 0x13c <__vector_9+0x4c>
		TCNT2 = TimerPreset1;
 10e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <TimerPreset1>
 112:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <TimerPreset1+0x1>
 116:	84 bd       	out	0x24, r24	; 36
		PORTD ^= BIT(7);
 118:	82 b3       	in	r24, 0x12	; 18
 11a:	80 58       	subi	r24, 0x80	; 128
 11c:	82 bb       	out	0x12, r24	; 18
		state = !state;
 11e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 122:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	23 2b       	or	r18, r19
 12c:	11 f0       	breq	.+4      	; 0x132 <__vector_9+0x42>
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 136:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 13a:	16 c0       	rjmp	.+44     	; 0x168 <__vector_9+0x78>
		
	} else {
		TCNT2 = TimerPreset2;
 13c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <TimerPreset2>
 140:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <TimerPreset2+0x1>
 144:	84 bd       	out	0x24, r24	; 36
		PORTD ^= BIT(7);
 146:	82 b3       	in	r24, 0x12	; 18
 148:	80 58       	subi	r24, 0x80	; 128
 14a:	82 bb       	out	0x12, r24	; 18
		state = !state;
 14c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 150:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	23 2b       	or	r18, r19
 15a:	11 f0       	breq	.+4      	; 0x160 <__vector_9+0x70>
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 164:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 168:	9f 91       	pop	r25
 16a:	8f 91       	pop	r24
 16c:	3f 91       	pop	r19
 16e:	2f 91       	pop	r18
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

Disassembly of section .text.main:

00000198 <main>:

int main( void ) {
	DDRD = 0xFF;
 198:	8f ef       	ldi	r24, 0xFF	; 255
 19a:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xFF;					// set PORTC for output (toggle PC0)
 19c:	84 bb       	out	0x14, r24	; 20
	timer2Init();
 19e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <timer2Init>

	while (1) {
		// do something else
		PORTC = TCNT2;
 1a2:	84 b5       	in	r24, 0x24	; 36
 1a4:	85 bb       	out	0x15, r24	; 21
		wait(10);			// every 10 ms (busy waiting
 1a6:	8a e0       	ldi	r24, 0x0A	; 10
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 bd 00 	call	0x17a	; 0x17a <wait>
 1ae:	f9 cf       	rjmp	.-14     	; 0x1a2 <main+0xa>
