
Week3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000009b8  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005b  00000000  00000000  000009b8  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000088  00000000  00000000  00000a13  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000011b4  00000000  00000000  00000a9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000a18  00000000  00000000  00001c4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000565  00000000  00000000  00002667  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000130  00000000  00000000  00002bcc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002a6  00000000  00000000  00002cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000382  00000000  00000000  00002fa2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000068  00000000  00000000  00003324  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000940  00000940  000009b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000338c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.lcd_strobe_lcd_e 00000026  0000082e  0000082e  000008a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.lcd_write_cmd 00000024  0000087a  0000087a  000008ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.lcd_write_data 00000024  0000089e  0000089e  00000912  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.lcd_write_string 0000001a  000008fc  000008fc  00000970  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.lcd_display_text 00000006  0000093a  0000093a  000009ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.lcd_set_cursor 00000008  00000932  00000932  000009a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .progmemx.data 00000011  000000ea  000000ea  0000015e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 20 .text.lcd_init 00000096  0000060c  0000060c  00000680  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.wait    0000001e  000008c2  000008c2  00000936  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__vector_10 00000026  00000854  00000854  000008c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.timer2Init 0000000e  00000916  00000916  0000098a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .progmemx.data 00000005  000000fb  000000fb  0000016f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 25 .text.main    0000007c  000006a2  000006a2  00000716  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .bss.TimerPreset 00000002  00800100  00800100  000009b8  2**0
                  ALLOC
 27 .text.libgcc  0000001c  000008e0  000008e0  00000954  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.avrlibc 00000060  00000796  00000796  0000080a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.avrlibc 00000450  00000100  00000100  00000174  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.avrlibc 00000038  000007f6  000007f6  0000086a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.avrlibc 00000078  0000071e  0000071e  00000792  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.avrlibc 000000bc  00000550  00000550  000005c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.libgcc  0000000e  00000924  00000924  00000998  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
   4:	0c 94 a0 04 	jmp	0x940	; 0x940 <__bad_interrupt>
   8:	0c 94 a0 04 	jmp	0x940	; 0x940 <__bad_interrupt>
   c:	0c 94 a0 04 	jmp	0x940	; 0x940 <__bad_interrupt>
  10:	0c 94 a0 04 	jmp	0x940	; 0x940 <__bad_interrupt>
  14:	0c 94 a0 04 	jmp	0x940	; 0x940 <__bad_interrupt>
  18:	0c 94 a0 04 	jmp	0x940	; 0x940 <__bad_interrupt>
  1c:	0c 94 a0 04 	jmp	0x940	; 0x940 <__bad_interrupt>
  20:	0c 94 a0 04 	jmp	0x940	; 0x940 <__bad_interrupt>
  24:	0c 94 a0 04 	jmp	0x940	; 0x940 <__bad_interrupt>
  28:	0c 94 2a 04 	jmp	0x854	; 0x854 <__vector_10>
  2c:	0c 94 a0 04 	jmp	0x940	; 0x940 <__bad_interrupt>
  30:	0c 94 a0 04 	jmp	0x940	; 0x940 <__bad_interrupt>
  34:	0c 94 a0 04 	jmp	0x940	; 0x940 <__bad_interrupt>
  38:	0c 94 a0 04 	jmp	0x940	; 0x940 <__bad_interrupt>
  3c:	0c 94 a0 04 	jmp	0x940	; 0x940 <__bad_interrupt>
  40:	0c 94 a0 04 	jmp	0x940	; 0x940 <__bad_interrupt>
  44:	0c 94 a0 04 	jmp	0x940	; 0x940 <__bad_interrupt>
  48:	0c 94 a0 04 	jmp	0x940	; 0x940 <__bad_interrupt>
  4c:	0c 94 a0 04 	jmp	0x940	; 0x940 <__bad_interrupt>
  50:	0c 94 a0 04 	jmp	0x940	; 0x940 <__bad_interrupt>
  54:	0c 94 a0 04 	jmp	0x940	; 0x940 <__bad_interrupt>
  58:	0c 94 a0 04 	jmp	0x940	; 0x940 <__bad_interrupt>
  5c:	0c 94 a0 04 	jmp	0x940	; 0x940 <__bad_interrupt>
  60:	0c 94 a0 04 	jmp	0x940	; 0x940 <__bad_interrupt>
  64:	0c 94 a0 04 	jmp	0x940	; 0x940 <__bad_interrupt>
  68:	0c 94 a0 04 	jmp	0x940	; 0x940 <__bad_interrupt>
  6c:	0c 94 a0 04 	jmp	0x940	; 0x940 <__bad_interrupt>
  70:	0c 94 a0 04 	jmp	0x940	; 0x940 <__bad_interrupt>
  74:	0c 94 a0 04 	jmp	0x940	; 0x940 <__bad_interrupt>
  78:	0c 94 a0 04 	jmp	0x940	; 0x940 <__bad_interrupt>
  7c:	0c 94 a0 04 	jmp	0x940	; 0x940 <__bad_interrupt>
  80:	0c 94 a0 04 	jmp	0x940	; 0x940 <__bad_interrupt>
  84:	0c 94 a0 04 	jmp	0x940	; 0x940 <__bad_interrupt>
  88:	0c 94 a0 04 	jmp	0x940	; 0x940 <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 02       	muls	r16, r17
  90:	80 00       	.word	0x0080	; ????

00000092 <__ctors_end>:
  92:	11 24       	eor	r1, r1
  94:	1f be       	out	0x3f, r1	; 63
  96:	cf ef       	ldi	r28, 0xFF	; 255
  98:	d0 e1       	ldi	r29, 0x10	; 16
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_copy_data>:
  9e:	ec e8       	ldi	r30, 0x8C	; 140
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	19 c0       	rjmp	.+50     	; 0xd8 <__do_clear_bss+0x8>
  a6:	b7 91       	elpm	r27, Z+
  a8:	a7 91       	elpm	r26, Z+
  aa:	37 91       	elpm	r19, Z+
  ac:	27 91       	elpm	r18, Z+
  ae:	07 91       	elpm	r16, Z+
  b0:	07 fd       	sbrc	r16, 7
  b2:	0e c0       	rjmp	.+28     	; 0xd0 <__do_clear_bss>
  b4:	97 91       	elpm	r25, Z+
  b6:	87 91       	elpm	r24, Z+
  b8:	ef 01       	movw	r28, r30
  ba:	f9 2f       	mov	r31, r25
  bc:	e8 2f       	mov	r30, r24
  be:	0b bf       	out	0x3b, r16	; 59
  c0:	07 90       	elpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a2 17       	cp	r26, r18
  c6:	b3 07       	cpc	r27, r19
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x22>
  ca:	fe 01       	movw	r30, r28
  cc:	1b be       	out	0x3b, r1	; 59
  ce:	04 c0       	rjmp	.+8      	; 0xd8 <__do_clear_bss+0x8>

000000d0 <__do_clear_bss>:
  d0:	1d 92       	st	X+, r1
  d2:	a2 17       	cp	r26, r18
  d4:	b3 07       	cpc	r27, r19
  d6:	e1 f7       	brne	.-8      	; 0xd0 <__do_clear_bss>
  d8:	e1 39       	cpi	r30, 0x91	; 145
  da:	f4 07       	cpc	r31, r20
  dc:	21 f7       	brne	.-56     	; 0xa6 <__do_copy_data+0x8>
  de:	0e 94 51 03 	call	0x6a2	; 0x6a2 <main>
  e2:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>

Disassembly of section .text:

00000940 <__bad_interrupt>:
 940:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.lcd_strobe_lcd_e:

0000082e <lcd_strobe_lcd_e>:
	PORTC |= (1<<LCD_RS);
	lcd_strobe_lcd_e();
}

void lcd_strobe_lcd_e(void) {
	PORTC |= (1<<LCD_E);
 82e:	85 b3       	in	r24, 0x15	; 21
 830:	88 60       	ori	r24, 0x08	; 8
 832:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 834:	8f ec       	ldi	r24, 0xCF	; 207
 836:	97 e0       	ldi	r25, 0x07	; 7
 838:	01 97       	sbiw	r24, 0x01	; 1
 83a:	f1 f7       	brne	.-4      	; 0x838 <lcd_strobe_lcd_e+0xa>
 83c:	00 c0       	rjmp	.+0      	; 0x83e <lcd_strobe_lcd_e+0x10>
 83e:	00 00       	nop
	_delay_ms(1);
	PORTC &= ~(1<<LCD_E);
 840:	85 b3       	in	r24, 0x15	; 21
 842:	87 7f       	andi	r24, 0xF7	; 247
 844:	85 bb       	out	0x15, r24	; 21
 846:	8f ec       	ldi	r24, 0xCF	; 207
 848:	97 e0       	ldi	r25, 0x07	; 7
 84a:	01 97       	sbiw	r24, 0x01	; 1
 84c:	f1 f7       	brne	.-4      	; 0x84a <lcd_strobe_lcd_e+0x1c>
 84e:	00 c0       	rjmp	.+0      	; 0x850 <lcd_strobe_lcd_e+0x22>
 850:	00 00       	nop
 852:	08 95       	ret

Disassembly of section .text.lcd_write_cmd:

0000087a <lcd_write_cmd>:
	}

}

void lcd_write_cmd(unsigned char byte)
{
 87a:	cf 93       	push	r28
 87c:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 87e:	85 bb       	out	0x15, r24	; 21
	PORTC &= ~(1<<LCD_RS);
 880:	85 b3       	in	r24, 0x15	; 21
 882:	8b 7f       	andi	r24, 0xFB	; 251
 884:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 886:	0e 94 17 04 	call	0x82e	; 0x82e <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 88a:	c2 95       	swap	r28
 88c:	c0 7f       	andi	r28, 0xF0	; 240
 88e:	c5 bb       	out	0x15, r28	; 21
	PORTC &= ~(1<<LCD_RS);
 890:	85 b3       	in	r24, 0x15	; 21
 892:	8b 7f       	andi	r24, 0xFB	; 251
 894:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 896:	0e 94 17 04 	call	0x82e	; 0x82e <lcd_strobe_lcd_e>
}
 89a:	cf 91       	pop	r28
 89c:	08 95       	ret

Disassembly of section .text.lcd_write_data:

0000089e <lcd_write_data>:

void lcd_write_data(unsigned char byte) {
 89e:	cf 93       	push	r28
 8a0:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 8a2:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1<<LCD_RS);
 8a4:	85 b3       	in	r24, 0x15	; 21
 8a6:	84 60       	ori	r24, 0x04	; 4
 8a8:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 8aa:	0e 94 17 04 	call	0x82e	; 0x82e <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 8ae:	c2 95       	swap	r28
 8b0:	c0 7f       	andi	r28, 0xF0	; 240
 8b2:	c5 bb       	out	0x15, r28	; 21
	PORTC |= (1<<LCD_RS);
 8b4:	85 b3       	in	r24, 0x15	; 21
 8b6:	84 60       	ori	r24, 0x04	; 4
 8b8:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 8ba:	0e 94 17 04 	call	0x82e	; 0x82e <lcd_strobe_lcd_e>
}
 8be:	cf 91       	pop	r28
 8c0:	08 95       	ret

Disassembly of section .text.lcd_write_string:

000008fc <lcd_write_string>:
	lcd_write_string(reset);
	lcd_set_cursor(40);
	lcd_write_string(reset);
}

void lcd_write_string(char *str) {
 8fc:	cf 93       	push	r28
 8fe:	df 93       	push	r29
 900:	ec 01       	movw	r28, r24
	
	for(;*str; str++){
 902:	03 c0       	rjmp	.+6      	; 0x90a <lcd_write_string+0xe>
		lcd_write_data(*str);
 904:	0e 94 4f 04 	call	0x89e	; 0x89e <lcd_write_data>
	lcd_write_string(reset);
}

void lcd_write_string(char *str) {
	
	for(;*str; str++){
 908:	21 96       	adiw	r28, 0x01	; 1
 90a:	88 81       	ld	r24, Y
 90c:	81 11       	cpse	r24, r1
 90e:	fa cf       	rjmp	.-12     	; 0x904 <lcd_write_string+0x8>
		lcd_write_data(*str);
	}

}
 910:	df 91       	pop	r29
 912:	cf 91       	pop	r28
 914:	08 95       	ret

Disassembly of section .text.lcd_display_text:

0000093a <lcd_display_text>:
}


void lcd_display_text(char *str) {
	//set_cursor(0);
	lcd_write_string(str);
 93a:	0e 94 7e 04 	call	0x8fc	; 0x8fc <lcd_write_string>
 93e:	08 95       	ret

Disassembly of section .text.lcd_set_cursor:

00000932 <lcd_set_cursor>:
}

void lcd_set_cursor(int position) {
	lcd_write_cmd(position | (1 << 7));
 932:	80 68       	ori	r24, 0x80	; 128
 934:	0e 94 3d 04 	call	0x87a	; 0x87a <lcd_write_cmd>
 938:	08 95       	ret

Disassembly of section .text.lcd_init:

0000060c <lcd_init>:
void init_4bits_mode(void);
void lcd_write_string(char *str);
void lcd_write_data(unsigned char byte);
void lcd_write_cmd(unsigned char byte);

void lcd_init() {
 60c:	1f 93       	push	r17
 60e:	cf 93       	push	r28
 610:	df 93       	push	r29
 612:	cd b7       	in	r28, 0x3d	; 61
 614:	de b7       	in	r29, 0x3e	; 62
 616:	61 97       	sbiw	r28, 0x11	; 17
 618:	0f b6       	in	r0, 0x3f	; 63
 61a:	f8 94       	cli
 61c:	de bf       	out	0x3e, r29	; 62
 61e:	0f be       	out	0x3f, r0	; 63
 620:	cd bf       	out	0x3d, r28	; 61
		// PORTC output mode and all low (also E and RS pin)
		DDRC = 0xFF;
 622:	8f ef       	ldi	r24, 0xFF	; 255
 624:	84 bb       	out	0x14, r24	; 20
		PORTC = 0x00;
 626:	15 ba       	out	0x15, r1	; 21

		// Step 2 (table 12)
		PORTC = 0x20;	// function set
 628:	10 e2       	ldi	r17, 0x20	; 32
 62a:	15 bb       	out	0x15, r17	; 21
		lcd_strobe_lcd_e();
 62c:	0e 94 17 04 	call	0x82e	; 0x82e <lcd_strobe_lcd_e>

		// Step 3 (table 12)
		PORTC = 0x20;   // function set
 630:	15 bb       	out	0x15, r17	; 21
		lcd_strobe_lcd_e();
 632:	0e 94 17 04 	call	0x82e	; 0x82e <lcd_strobe_lcd_e>
		PORTC = 0x80;
 636:	80 e8       	ldi	r24, 0x80	; 128
 638:	85 bb       	out	0x15, r24	; 21
		lcd_strobe_lcd_e();
 63a:	0e 94 17 04 	call	0x82e	; 0x82e <lcd_strobe_lcd_e>

		// Step 4 (table 12)
		PORTC = 0x00;   // Display on/off control
 63e:	15 ba       	out	0x15, r1	; 21
		lcd_strobe_lcd_e();
 640:	0e 94 17 04 	call	0x82e	; 0x82e <lcd_strobe_lcd_e>
		PORTC = 0xF0;
 644:	80 ef       	ldi	r24, 0xF0	; 240
 646:	85 bb       	out	0x15, r24	; 21
		lcd_strobe_lcd_e();
 648:	0e 94 17 04 	call	0x82e	; 0x82e <lcd_strobe_lcd_e>

		// Step 4 (table 12)
		PORTC = 0x00;   // Entry mode set
 64c:	15 ba       	out	0x15, r1	; 21
		lcd_strobe_lcd_e();
 64e:	0e 94 17 04 	call	0x82e	; 0x82e <lcd_strobe_lcd_e>
		PORTC = 0x60;
 652:	80 e6       	ldi	r24, 0x60	; 96
 654:	85 bb       	out	0x15, r24	; 21
		lcd_strobe_lcd_e();
 656:	0e 94 17 04 	call	0x82e	; 0x82e <lcd_strobe_lcd_e>
		
	char reset[] = "                "; //Reset string
 65a:	2a ee       	ldi	r18, 0xEA	; 234
 65c:	30 e0       	ldi	r19, 0x00	; 0
 65e:	40 e0       	ldi	r20, 0x00	; 0
 660:	81 e1       	ldi	r24, 0x11	; 17
 662:	f9 01       	movw	r30, r18
 664:	de 01       	movw	r26, r28
 666:	11 96       	adiw	r26, 0x01	; 1
 668:	74 2f       	mov	r23, r20
 66a:	0e 94 70 04 	call	0x8e0	; 0x8e0 <__movmemx_qi>
	lcd_set_cursor(0);
 66e:	80 e0       	ldi	r24, 0x00	; 0
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	0e 94 99 04 	call	0x932	; 0x932 <lcd_set_cursor>
	lcd_write_string(reset);
 676:	ce 01       	movw	r24, r28
 678:	01 96       	adiw	r24, 0x01	; 1
 67a:	0e 94 7e 04 	call	0x8fc	; 0x8fc <lcd_write_string>
	lcd_set_cursor(40);
 67e:	88 e2       	ldi	r24, 0x28	; 40
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	0e 94 99 04 	call	0x932	; 0x932 <lcd_set_cursor>
	lcd_write_string(reset);
 686:	ce 01       	movw	r24, r28
 688:	01 96       	adiw	r24, 0x01	; 1
 68a:	0e 94 7e 04 	call	0x8fc	; 0x8fc <lcd_write_string>
}
 68e:	61 96       	adiw	r28, 0x11	; 17
 690:	0f b6       	in	r0, 0x3f	; 63
 692:	f8 94       	cli
 694:	de bf       	out	0x3e, r29	; 62
 696:	0f be       	out	0x3f, r0	; 63
 698:	cd bf       	out	0x3d, r28	; 61
 69a:	df 91       	pop	r29
 69c:	cf 91       	pop	r28
 69e:	1f 91       	pop	r17
 6a0:	08 95       	ret

Disassembly of section .text.wait:

000008c2 <wait>:
#define BIT(x)			(1 << (x))

// wait(): busy waiting for 'ms' millisecond
// Used library: util/delay.h
void wait( int ms ) {
	for (int tms=0; tms<ms; tms++) {
 8c2:	20 e0       	ldi	r18, 0x00	; 0
 8c4:	30 e0       	ldi	r19, 0x00	; 0
 8c6:	08 c0       	rjmp	.+16     	; 0x8d8 <wait+0x16>
 8c8:	ef ec       	ldi	r30, 0xCF	; 207
 8ca:	f7 e0       	ldi	r31, 0x07	; 7
 8cc:	31 97       	sbiw	r30, 0x01	; 1
 8ce:	f1 f7       	brne	.-4      	; 0x8cc <wait+0xa>
 8d0:	00 c0       	rjmp	.+0      	; 0x8d2 <wait+0x10>
 8d2:	00 00       	nop
 8d4:	2f 5f       	subi	r18, 0xFF	; 255
 8d6:	3f 4f       	sbci	r19, 0xFF	; 255
 8d8:	28 17       	cp	r18, r24
 8da:	39 07       	cpc	r19, r25
 8dc:	ac f3       	brlt	.-22     	; 0x8c8 <wait+0x6>
		_delay_ms( 1 );			// library function (max 30 ms at 8MHz)
	}
}
 8de:	08 95       	ret

Disassembly of section .text.__vector_10:

00000854 <__vector_10>:

volatile int TimerPreset = 0;  // 0xF6, 10 till overflow
// Interrupt routine timer2 overflow
ISR( TIMER2_OVF_vect ) {
 854:	1f 92       	push	r1
 856:	0f 92       	push	r0
 858:	0f b6       	in	r0, 0x3f	; 63
 85a:	0f 92       	push	r0
 85c:	11 24       	eor	r1, r1
 85e:	8f 93       	push	r24
 860:	9f 93       	push	r25
	TCNT2 = TimerPreset;	// Preset value
 862:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 866:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 86a:	84 bd       	out	0x24, r24	; 36
}
 86c:	9f 91       	pop	r25
 86e:	8f 91       	pop	r24
 870:	0f 90       	pop	r0
 872:	0f be       	out	0x3f, r0	; 63
 874:	0f 90       	pop	r0
 876:	1f 90       	pop	r1
 878:	18 95       	reti

Disassembly of section .text.timer2Init:

00000916 <timer2Init>:

// Initialize timer2
void timer2Init( void ) {
	TIMSK |= BIT(6);		// T2 overflow interrupt enable
 916:	87 b7       	in	r24, 0x37	; 55
 918:	80 64       	ori	r24, 0x40	; 64
 91a:	87 bf       	out	0x37, r24	; 55
	sei();				// turn_on intr all
 91c:	78 94       	sei
	TCCR2 = 0x07;		// Initialize T2: ext.counting, rising edge, run
 91e:	87 e0       	ldi	r24, 0x07	; 7
 920:	85 bd       	out	0x25, r24	; 37
 922:	08 95       	ret

Disassembly of section .text.main:

000006a2 <main>:
}

int main(void) {
 6a2:	cf 93       	push	r28
 6a4:	df 93       	push	r29
 6a6:	00 d0       	rcall	.+0      	; 0x6a8 <main+0x6>
 6a8:	00 d0       	rcall	.+0      	; 0x6aa <main+0x8>
 6aa:	cd b7       	in	r28, 0x3d	; 61
 6ac:	de b7       	in	r29, 0x3e	; 62
	
	DDRD &= ~BIT(7);		// PD7 op input: DDRD=xxxx xxx0
 6ae:	81 b3       	in	r24, 0x11	; 17
 6b0:	8f 77       	andi	r24, 0x7F	; 127
 6b2:	81 bb       	out	0x11, r24	; 17
	DDRA = 0xFF;			// set PORTA for output (shows countregister)
 6b4:	8f ef       	ldi	r24, 0xFF	; 255
 6b6:	8a bb       	out	0x1a, r24	; 26
	
	timer2Init();
 6b8:	0e 94 8b 04 	call	0x916	; 0x916 <timer2Init>
	lcd_init();
 6bc:	0e 94 06 03 	call	0x60c	; 0x60c <lcd_init>
	lcd_set_cursor(0);
 6c0:	80 e0       	ldi	r24, 0x00	; 0
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	0e 94 99 04 	call	0x932	; 0x932 <lcd_set_cursor>
	char str[4];

	
	int lastValue = 0;
 6c8:	e1 2c       	mov	r14, r1
 6ca:	f1 2c       	mov	r15, r1
	int currentValue = 0;

	while (1) {
		PORTA = TCNT2;		// show value counter 2
 6cc:	84 b5       	in	r24, 0x24	; 36
 6ce:	8b bb       	out	0x1b, r24	; 27
		currentValue = TCNT2;
 6d0:	84 b5       	in	r24, 0x24	; 36
 6d2:	08 2f       	mov	r16, r24
 6d4:	10 e0       	ldi	r17, 0x00	; 0
		if (lastValue != currentValue)
 6d6:	e0 16       	cp	r14, r16
 6d8:	f1 06       	cpc	r15, r17
 6da:	e1 f0       	breq	.+56     	; 0x714 <main+0x72>
		{
			sprintf(str, "%d  ",	currentValue);
 6dc:	1f 92       	push	r1
 6de:	8f 93       	push	r24
 6e0:	8b ef       	ldi	r24, 0xFB	; 251
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	a0 e0       	ldi	r26, 0x00	; 0
 6e6:	af 93       	push	r26
 6e8:	9f 93       	push	r25
 6ea:	8f 93       	push	r24
 6ec:	ce 01       	movw	r24, r28
 6ee:	01 96       	adiw	r24, 0x01	; 1
 6f0:	7c 01       	movw	r14, r24
 6f2:	9f 93       	push	r25
 6f4:	8f 93       	push	r24
 6f6:	0e 94 cb 03 	call	0x796	; 0x796 <sprintf>
			lcd_set_cursor(0);
 6fa:	80 e0       	ldi	r24, 0x00	; 0
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	0e 94 99 04 	call	0x932	; 0x932 <lcd_set_cursor>
			lcd_display_text(str);
 702:	c7 01       	movw	r24, r14
 704:	0e 94 9d 04 	call	0x93a	; 0x93a <lcd_display_text>
 708:	0f b6       	in	r0, 0x3f	; 63
 70a:	f8 94       	cli
 70c:	de bf       	out	0x3e, r29	; 62
 70e:	0f be       	out	0x3f, r0	; 63
 710:	cd bf       	out	0x3d, r28	; 61
			
			lastValue = currentValue;
 712:	78 01       	movw	r14, r16
		}
		
		
		wait(100);
 714:	84 e6       	ldi	r24, 0x64	; 100
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	0e 94 61 04 	call	0x8c2	; 0x8c2 <wait>
	}
 71c:	d7 cf       	rjmp	.-82     	; 0x6cc <main+0x2a>

Disassembly of section .text.libgcc:

000008e0 <__movmemx_qi>:
 8e0:	99 27       	eor	r25, r25

000008e2 <__movmemx_hi>:
 8e2:	77 fd       	sbrc	r23, 7
 8e4:	06 c0       	rjmp	.+12     	; 0x8f2 <__movmemx_hi+0x10>
 8e6:	7b bf       	out	0x3b, r23	; 59
 8e8:	07 90       	elpm	r0, Z+
 8ea:	0d 92       	st	X+, r0
 8ec:	01 97       	sbiw	r24, 0x01	; 1
 8ee:	e1 f7       	brne	.-8      	; 0x8e8 <__movmemx_hi+0x6>
 8f0:	08 95       	ret
 8f2:	01 90       	ld	r0, Z+
 8f4:	0d 92       	st	X+, r0
 8f6:	01 97       	sbiw	r24, 0x01	; 1
 8f8:	e1 f7       	brne	.-8      	; 0x8f2 <__movmemx_hi+0x10>
 8fa:	08 95       	ret

Disassembly of section .text.avrlibc:

00000796 <sprintf>:
 796:	0f 93       	push	r16
 798:	1f 93       	push	r17
 79a:	cf 93       	push	r28
 79c:	df 93       	push	r29
 79e:	cd b7       	in	r28, 0x3d	; 61
 7a0:	de b7       	in	r29, 0x3e	; 62
 7a2:	2f 97       	sbiw	r28, 0x0f	; 15
 7a4:	0f b6       	in	r0, 0x3f	; 63
 7a6:	f8 94       	cli
 7a8:	de bf       	out	0x3e, r29	; 62
 7aa:	0f be       	out	0x3f, r0	; 63
 7ac:	cd bf       	out	0x3d, r28	; 61
 7ae:	0e 89       	ldd	r16, Y+22	; 0x16
 7b0:	1f 89       	ldd	r17, Y+23	; 0x17
 7b2:	86 e0       	ldi	r24, 0x06	; 6
 7b4:	8d 83       	std	Y+5, r24	; 0x05
 7b6:	1a 83       	std	Y+2, r17	; 0x02
 7b8:	09 83       	std	Y+1, r16	; 0x01
 7ba:	8f ef       	ldi	r24, 0xFF	; 255
 7bc:	9f e7       	ldi	r25, 0x7F	; 127
 7be:	9f 83       	std	Y+7, r25	; 0x07
 7c0:	8e 83       	std	Y+6, r24	; 0x06
 7c2:	9e 01       	movw	r18, r28
 7c4:	25 5e       	subi	r18, 0xE5	; 229
 7c6:	3f 4f       	sbci	r19, 0xFF	; 255
 7c8:	48 8d       	ldd	r20, Y+24	; 0x18
 7ca:	59 8d       	ldd	r21, Y+25	; 0x19
 7cc:	6a 8d       	ldd	r22, Y+26	; 0x1a
 7ce:	ce 01       	movw	r24, r28
 7d0:	01 96       	adiw	r24, 0x01	; 1
 7d2:	0e 94 80 00 	call	0x100	; 0x100 <vfprintf>
 7d6:	e8 85       	ldd	r30, Y+8	; 0x08
 7d8:	f9 85       	ldd	r31, Y+9	; 0x09
 7da:	e0 0f       	add	r30, r16
 7dc:	f1 1f       	adc	r31, r17
 7de:	10 82       	st	Z, r1
 7e0:	2f 96       	adiw	r28, 0x0f	; 15
 7e2:	0f b6       	in	r0, 0x3f	; 63
 7e4:	f8 94       	cli
 7e6:	de bf       	out	0x3e, r29	; 62
 7e8:	0f be       	out	0x3f, r0	; 63
 7ea:	cd bf       	out	0x3d, r28	; 61
 7ec:	df 91       	pop	r29
 7ee:	cf 91       	pop	r28
 7f0:	1f 91       	pop	r17
 7f2:	0f 91       	pop	r16
 7f4:	08 95       	ret

Disassembly of section .text.avrlibc:

00000100 <vfprintf>:
 100:	2f 92       	push	r2
 102:	3f 92       	push	r3
 104:	4f 92       	push	r4
 106:	6f 92       	push	r6
 108:	7f 92       	push	r7
 10a:	8f 92       	push	r8
 10c:	9f 92       	push	r9
 10e:	af 92       	push	r10
 110:	bf 92       	push	r11
 112:	cf 92       	push	r12
 114:	df 92       	push	r13
 116:	ef 92       	push	r14
 118:	ff 92       	push	r15
 11a:	0f 93       	push	r16
 11c:	1f 93       	push	r17
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	cd b7       	in	r28, 0x3d	; 61
 124:	de b7       	in	r29, 0x3e	; 62
 126:	62 97       	sbiw	r28, 0x12	; 18
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	f8 94       	cli
 12c:	de bf       	out	0x3e, r29	; 62
 12e:	0f be       	out	0x3f, r0	; 63
 130:	cd bf       	out	0x3d, r28	; 61
 132:	6c 01       	movw	r12, r24
 134:	3a 01       	movw	r6, r20
 136:	86 2e       	mov	r8, r22
 138:	79 01       	movw	r14, r18
 13a:	fc 01       	movw	r30, r24
 13c:	10 86       	std	Z+8, r1	; 0x08
 13e:	17 82       	std	Z+7, r1	; 0x07
 140:	84 81       	ldd	r24, Z+4	; 0x04
 142:	81 ff       	sbrs	r24, 1
 144:	eb c1       	rjmp	.+982    	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
 146:	9e 01       	movw	r18, r28
 148:	2f 5f       	subi	r18, 0xFF	; 255
 14a:	3f 4f       	sbci	r19, 0xFF	; 255
 14c:	3d 87       	std	Y+13, r19	; 0x0d
 14e:	2c 87       	std	Y+12, r18	; 0x0c
 150:	c9 01       	movw	r24, r18
 152:	a0 e8       	ldi	r26, 0x80	; 128
 154:	88 8b       	std	Y+16, r24	; 0x10
 156:	99 8b       	std	Y+17, r25	; 0x11
 158:	aa 8b       	std	Y+18, r26	; 0x12
 15a:	9f e3       	ldi	r25, 0x3F	; 63
 15c:	99 2e       	mov	r9, r25
 15e:	f3 01       	movw	r30, r6
 160:	58 2d       	mov	r21, r8
 162:	0e 94 92 04 	call	0x924	; 0x924 <__xload_1>
 166:	86 2f       	mov	r24, r22
 168:	66 23       	and	r22, r22
 16a:	09 f4       	brne	.+2      	; 0x16e <vfprintf+0x6e>
 16c:	d3 c1       	rjmp	.+934    	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 16e:	48 2d       	mov	r20, r8
 170:	93 01       	movw	r18, r6
 172:	2f 5f       	subi	r18, 0xFF	; 255
 174:	3f 4f       	sbci	r19, 0xFF	; 255
 176:	4f 4f       	sbci	r20, 0xFF	; 255
 178:	65 32       	cpi	r22, 0x25	; 37
 17a:	19 f0       	breq	.+6      	; 0x182 <vfprintf+0x82>
 17c:	39 01       	movw	r6, r18
 17e:	84 2e       	mov	r8, r20
 180:	0b c0       	rjmp	.+22     	; 0x198 <vfprintf+0x98>
 182:	f9 01       	movw	r30, r18
 184:	54 2f       	mov	r21, r20
 186:	0e 94 92 04 	call	0x924	; 0x924 <__xload_1>
 18a:	86 2f       	mov	r24, r22
 18c:	92 e0       	ldi	r25, 0x02	; 2
 18e:	69 0e       	add	r6, r25
 190:	71 1c       	adc	r7, r1
 192:	81 1c       	adc	r8, r1
 194:	65 32       	cpi	r22, 0x25	; 37
 196:	29 f4       	brne	.+10     	; 0x1a2 <vfprintf+0xa2>
 198:	b6 01       	movw	r22, r12
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 8f 03 	call	0x71e	; 0x71e <fputc>
 1a0:	de cf       	rjmp	.-68     	; 0x15e <vfprintf+0x5e>
 1a2:	b1 2c       	mov	r11, r1
 1a4:	00 e0       	ldi	r16, 0x00	; 0
 1a6:	10 e0       	ldi	r17, 0x00	; 0
 1a8:	10 32       	cpi	r17, 0x20	; 32
 1aa:	a0 f4       	brcc	.+40     	; 0x1d4 <vfprintf+0xd4>
 1ac:	8b 32       	cpi	r24, 0x2B	; 43
 1ae:	69 f0       	breq	.+26     	; 0x1ca <vfprintf+0xca>
 1b0:	30 f4       	brcc	.+12     	; 0x1be <vfprintf+0xbe>
 1b2:	80 32       	cpi	r24, 0x20	; 32
 1b4:	59 f0       	breq	.+22     	; 0x1cc <vfprintf+0xcc>
 1b6:	83 32       	cpi	r24, 0x23	; 35
 1b8:	69 f4       	brne	.+26     	; 0x1d4 <vfprintf+0xd4>
 1ba:	10 61       	ori	r17, 0x10	; 16
 1bc:	2c c0       	rjmp	.+88     	; 0x216 <vfprintf+0x116>
 1be:	8d 32       	cpi	r24, 0x2D	; 45
 1c0:	39 f0       	breq	.+14     	; 0x1d0 <vfprintf+0xd0>
 1c2:	80 33       	cpi	r24, 0x30	; 48
 1c4:	39 f4       	brne	.+14     	; 0x1d4 <vfprintf+0xd4>
 1c6:	11 60       	ori	r17, 0x01	; 1
 1c8:	26 c0       	rjmp	.+76     	; 0x216 <vfprintf+0x116>
 1ca:	12 60       	ori	r17, 0x02	; 2
 1cc:	14 60       	ori	r17, 0x04	; 4
 1ce:	23 c0       	rjmp	.+70     	; 0x216 <vfprintf+0x116>
 1d0:	18 60       	ori	r17, 0x08	; 8
 1d2:	21 c0       	rjmp	.+66     	; 0x216 <vfprintf+0x116>
 1d4:	17 fd       	sbrc	r17, 7
 1d6:	2a c0       	rjmp	.+84     	; 0x22c <vfprintf+0x12c>
 1d8:	90 ed       	ldi	r25, 0xD0	; 208
 1da:	98 0f       	add	r25, r24
 1dc:	9a 30       	cpi	r25, 0x0A	; 10
 1de:	78 f4       	brcc	.+30     	; 0x1fe <vfprintf+0xfe>
 1e0:	16 ff       	sbrs	r17, 6
 1e2:	06 c0       	rjmp	.+12     	; 0x1f0 <vfprintf+0xf0>
 1e4:	aa e0       	ldi	r26, 0x0A	; 10
 1e6:	ba 9e       	mul	r11, r26
 1e8:	90 0d       	add	r25, r0
 1ea:	11 24       	eor	r1, r1
 1ec:	b9 2e       	mov	r11, r25
 1ee:	13 c0       	rjmp	.+38     	; 0x216 <vfprintf+0x116>
 1f0:	ea e0       	ldi	r30, 0x0A	; 10
 1f2:	0e 9f       	mul	r16, r30
 1f4:	90 0d       	add	r25, r0
 1f6:	11 24       	eor	r1, r1
 1f8:	09 2f       	mov	r16, r25
 1fa:	10 62       	ori	r17, 0x20	; 32
 1fc:	0c c0       	rjmp	.+24     	; 0x216 <vfprintf+0x116>
 1fe:	8e 32       	cpi	r24, 0x2E	; 46
 200:	21 f4       	brne	.+8      	; 0x20a <vfprintf+0x10a>
 202:	16 fd       	sbrc	r17, 6
 204:	87 c1       	rjmp	.+782    	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 206:	10 64       	ori	r17, 0x40	; 64
 208:	06 c0       	rjmp	.+12     	; 0x216 <vfprintf+0x116>
 20a:	8c 36       	cpi	r24, 0x6C	; 108
 20c:	11 f4       	brne	.+4      	; 0x212 <vfprintf+0x112>
 20e:	10 68       	ori	r17, 0x80	; 128
 210:	02 c0       	rjmp	.+4      	; 0x216 <vfprintf+0x116>
 212:	88 36       	cpi	r24, 0x68	; 104
 214:	59 f4       	brne	.+22     	; 0x22c <vfprintf+0x12c>
 216:	f3 01       	movw	r30, r6
 218:	58 2d       	mov	r21, r8
 21a:	0e 94 92 04 	call	0x924	; 0x924 <__xload_1>
 21e:	86 2f       	mov	r24, r22
 220:	ff ef       	ldi	r31, 0xFF	; 255
 222:	6f 1a       	sub	r6, r31
 224:	7f 0a       	sbc	r7, r31
 226:	8f 0a       	sbc	r8, r31
 228:	61 11       	cpse	r22, r1
 22a:	be cf       	rjmp	.-132    	; 0x1a8 <vfprintf+0xa8>
 22c:	98 2f       	mov	r25, r24
 22e:	9f 7d       	andi	r25, 0xDF	; 223
 230:	95 54       	subi	r25, 0x45	; 69
 232:	93 30       	cpi	r25, 0x03	; 3
 234:	28 f4       	brcc	.+10     	; 0x240 <vfprintf+0x140>
 236:	24 e0       	ldi	r18, 0x04	; 4
 238:	e2 0e       	add	r14, r18
 23a:	f1 1c       	adc	r15, r1
 23c:	99 82       	std	Y+1, r9	; 0x01
 23e:	0f c0       	rjmp	.+30     	; 0x25e <vfprintf+0x15e>
 240:	83 36       	cpi	r24, 0x63	; 99
 242:	31 f0       	breq	.+12     	; 0x250 <vfprintf+0x150>
 244:	83 37       	cpi	r24, 0x73	; 115
 246:	91 f0       	breq	.+36     	; 0x26c <vfprintf+0x16c>
 248:	83 35       	cpi	r24, 0x53	; 83
 24a:	09 f0       	breq	.+2      	; 0x24e <vfprintf+0x14e>
 24c:	64 c0       	rjmp	.+200    	; 0x316 <vfprintf+0x216>
 24e:	27 c0       	rjmp	.+78     	; 0x29e <vfprintf+0x19e>
 250:	f7 01       	movw	r30, r14
 252:	80 81       	ld	r24, Z
 254:	89 83       	std	Y+1, r24	; 0x01
 256:	97 01       	movw	r18, r14
 258:	2e 5f       	subi	r18, 0xFE	; 254
 25a:	3f 4f       	sbci	r19, 0xFF	; 255
 25c:	79 01       	movw	r14, r18
 25e:	28 88       	ldd	r2, Y+16	; 0x10
 260:	39 88       	ldd	r3, Y+17	; 0x11
 262:	4a 88       	ldd	r4, Y+18	; 0x12
 264:	aa 24       	eor	r10, r10
 266:	a3 94       	inc	r10
 268:	b1 2c       	mov	r11, r1
 26a:	17 c0       	rjmp	.+46     	; 0x29a <vfprintf+0x19a>
 26c:	a7 01       	movw	r20, r14
 26e:	4d 5f       	subi	r20, 0xFD	; 253
 270:	5f 4f       	sbci	r21, 0xFF	; 255
 272:	5f 87       	std	Y+15, r21	; 0x0f
 274:	4e 87       	std	Y+14, r20	; 0x0e
 276:	f7 01       	movw	r30, r14
 278:	20 80       	ld	r2, Z
 27a:	31 80       	ldd	r3, Z+1	; 0x01
 27c:	42 80       	ldd	r4, Z+2	; 0x02
 27e:	16 ff       	sbrs	r17, 6
 280:	03 c0       	rjmp	.+6      	; 0x288 <vfprintf+0x188>
 282:	4b 2d       	mov	r20, r11
 284:	50 e0       	ldi	r21, 0x00	; 0
 286:	02 c0       	rjmp	.+4      	; 0x28c <vfprintf+0x18c>
 288:	4f ef       	ldi	r20, 0xFF	; 255
 28a:	5f ef       	ldi	r21, 0xFF	; 255
 28c:	84 2d       	mov	r24, r4
 28e:	b1 01       	movw	r22, r2
 290:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <strnlen>
 294:	5c 01       	movw	r10, r24
 296:	ee 84       	ldd	r14, Y+14	; 0x0e
 298:	ff 84       	ldd	r15, Y+15	; 0x0f
 29a:	1f 77       	andi	r17, 0x7F	; 127
 29c:	18 c0       	rjmp	.+48     	; 0x2ce <vfprintf+0x1ce>
 29e:	97 01       	movw	r18, r14
 2a0:	2d 5f       	subi	r18, 0xFD	; 253
 2a2:	3f 4f       	sbci	r19, 0xFF	; 255
 2a4:	3f 87       	std	Y+15, r19	; 0x0f
 2a6:	2e 87       	std	Y+14, r18	; 0x0e
 2a8:	f7 01       	movw	r30, r14
 2aa:	20 80       	ld	r2, Z
 2ac:	31 80       	ldd	r3, Z+1	; 0x01
 2ae:	42 80       	ldd	r4, Z+2	; 0x02
 2b0:	16 ff       	sbrs	r17, 6
 2b2:	03 c0       	rjmp	.+6      	; 0x2ba <vfprintf+0x1ba>
 2b4:	4b 2d       	mov	r20, r11
 2b6:	50 e0       	ldi	r21, 0x00	; 0
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <vfprintf+0x1be>
 2ba:	4f ef       	ldi	r20, 0xFF	; 255
 2bc:	5f ef       	ldi	r21, 0xFF	; 255
 2be:	84 2d       	mov	r24, r4
 2c0:	b1 01       	movw	r22, r2
 2c2:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <strnlen>
 2c6:	5c 01       	movw	r10, r24
 2c8:	10 68       	ori	r17, 0x80	; 128
 2ca:	ee 84       	ldd	r14, Y+14	; 0x0e
 2cc:	ff 84       	ldd	r15, Y+15	; 0x0f
 2ce:	13 fd       	sbrc	r17, 3
 2d0:	1e c0       	rjmp	.+60     	; 0x30e <vfprintf+0x20e>
 2d2:	80 2f       	mov	r24, r16
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	a8 16       	cp	r10, r24
 2d8:	b9 06       	cpc	r11, r25
 2da:	c8 f4       	brcc	.+50     	; 0x30e <vfprintf+0x20e>
 2dc:	b6 01       	movw	r22, r12
 2de:	80 e2       	ldi	r24, 0x20	; 32
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e 94 8f 03 	call	0x71e	; 0x71e <fputc>
 2e6:	01 50       	subi	r16, 0x01	; 1
 2e8:	f4 cf       	rjmp	.-24     	; 0x2d2 <vfprintf+0x1d2>
 2ea:	f1 01       	movw	r30, r2
 2ec:	54 2d       	mov	r21, r4
 2ee:	0e 94 92 04 	call	0x924	; 0x924 <__xload_1>
 2f2:	86 2f       	mov	r24, r22
 2f4:	ff ef       	ldi	r31, 0xFF	; 255
 2f6:	2f 1a       	sub	r2, r31
 2f8:	3f 0a       	sbc	r3, r31
 2fa:	4f 0a       	sbc	r4, r31
 2fc:	b6 01       	movw	r22, r12
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 8f 03 	call	0x71e	; 0x71e <fputc>
 304:	01 11       	cpse	r16, r1
 306:	01 50       	subi	r16, 0x01	; 1
 308:	21 e0       	ldi	r18, 0x01	; 1
 30a:	a2 1a       	sub	r10, r18
 30c:	b1 08       	sbc	r11, r1
 30e:	a1 14       	cp	r10, r1
 310:	b1 04       	cpc	r11, r1
 312:	59 f7       	brne	.-42     	; 0x2ea <vfprintf+0x1ea>
 314:	f5 c0       	rjmp	.+490    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 316:	84 36       	cpi	r24, 0x64	; 100
 318:	11 f0       	breq	.+4      	; 0x31e <vfprintf+0x21e>
 31a:	89 36       	cpi	r24, 0x69	; 105
 31c:	71 f5       	brne	.+92     	; 0x37a <vfprintf+0x27a>
 31e:	f7 01       	movw	r30, r14
 320:	17 ff       	sbrs	r17, 7
 322:	08 c0       	rjmp	.+16     	; 0x334 <vfprintf+0x234>
 324:	60 81       	ld	r22, Z
 326:	71 81       	ldd	r23, Z+1	; 0x01
 328:	82 81       	ldd	r24, Z+2	; 0x02
 32a:	93 81       	ldd	r25, Z+3	; 0x03
 32c:	97 01       	movw	r18, r14
 32e:	2c 5f       	subi	r18, 0xFC	; 252
 330:	3f 4f       	sbci	r19, 0xFF	; 255
 332:	09 c0       	rjmp	.+18     	; 0x346 <vfprintf+0x246>
 334:	60 81       	ld	r22, Z
 336:	71 81       	ldd	r23, Z+1	; 0x01
 338:	07 2e       	mov	r0, r23
 33a:	00 0c       	add	r0, r0
 33c:	88 0b       	sbc	r24, r24
 33e:	99 0b       	sbc	r25, r25
 340:	97 01       	movw	r18, r14
 342:	2e 5f       	subi	r18, 0xFE	; 254
 344:	3f 4f       	sbci	r19, 0xFF	; 255
 346:	79 01       	movw	r14, r18
 348:	1f 76       	andi	r17, 0x6F	; 111
 34a:	31 2e       	mov	r3, r17
 34c:	97 ff       	sbrs	r25, 7
 34e:	0a c0       	rjmp	.+20     	; 0x364 <vfprintf+0x264>
 350:	90 95       	com	r25
 352:	80 95       	com	r24
 354:	70 95       	com	r23
 356:	61 95       	neg	r22
 358:	7f 4f       	sbci	r23, 0xFF	; 255
 35a:	8f 4f       	sbci	r24, 0xFF	; 255
 35c:	9f 4f       	sbci	r25, 0xFF	; 255
 35e:	31 2f       	mov	r19, r17
 360:	30 68       	ori	r19, 0x80	; 128
 362:	33 2e       	mov	r3, r19
 364:	2a e0       	ldi	r18, 0x0A	; 10
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	ae 01       	movw	r20, r28
 36a:	4f 5f       	subi	r20, 0xFF	; 255
 36c:	5f 4f       	sbci	r21, 0xFF	; 255
 36e:	0e 94 a8 02 	call	0x550	; 0x550 <__ultoa_invert>
 372:	48 2e       	mov	r4, r24
 374:	4c 85       	ldd	r20, Y+12	; 0x0c
 376:	44 1a       	sub	r4, r20
 378:	4a c0       	rjmp	.+148    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 37a:	85 37       	cpi	r24, 0x75	; 117
 37c:	29 f4       	brne	.+10     	; 0x388 <vfprintf+0x288>
 37e:	1f 7e       	andi	r17, 0xEF	; 239
 380:	a1 2e       	mov	r10, r17
 382:	2a e0       	ldi	r18, 0x0A	; 10
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	25 c0       	rjmp	.+74     	; 0x3d2 <vfprintf+0x2d2>
 388:	51 2f       	mov	r21, r17
 38a:	59 7f       	andi	r21, 0xF9	; 249
 38c:	a5 2e       	mov	r10, r21
 38e:	8f 36       	cpi	r24, 0x6F	; 111
 390:	c1 f0       	breq	.+48     	; 0x3c2 <vfprintf+0x2c2>
 392:	18 f4       	brcc	.+6      	; 0x39a <vfprintf+0x29a>
 394:	88 35       	cpi	r24, 0x58	; 88
 396:	79 f0       	breq	.+30     	; 0x3b6 <vfprintf+0x2b6>
 398:	bd c0       	rjmp	.+378    	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 39a:	80 37       	cpi	r24, 0x70	; 112
 39c:	19 f0       	breq	.+6      	; 0x3a4 <vfprintf+0x2a4>
 39e:	88 37       	cpi	r24, 0x78	; 120
 3a0:	21 f0       	breq	.+8      	; 0x3aa <vfprintf+0x2aa>
 3a2:	b8 c0       	rjmp	.+368    	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 3a4:	85 2f       	mov	r24, r21
 3a6:	80 61       	ori	r24, 0x10	; 16
 3a8:	a8 2e       	mov	r10, r24
 3aa:	a4 fe       	sbrs	r10, 4
 3ac:	0d c0       	rjmp	.+26     	; 0x3c8 <vfprintf+0x2c8>
 3ae:	9a 2d       	mov	r25, r10
 3b0:	94 60       	ori	r25, 0x04	; 4
 3b2:	a9 2e       	mov	r10, r25
 3b4:	09 c0       	rjmp	.+18     	; 0x3c8 <vfprintf+0x2c8>
 3b6:	14 ff       	sbrs	r17, 4
 3b8:	0a c0       	rjmp	.+20     	; 0x3ce <vfprintf+0x2ce>
 3ba:	a5 2f       	mov	r26, r21
 3bc:	a6 60       	ori	r26, 0x06	; 6
 3be:	aa 2e       	mov	r10, r26
 3c0:	06 c0       	rjmp	.+12     	; 0x3ce <vfprintf+0x2ce>
 3c2:	28 e0       	ldi	r18, 0x08	; 8
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	05 c0       	rjmp	.+10     	; 0x3d2 <vfprintf+0x2d2>
 3c8:	20 e1       	ldi	r18, 0x10	; 16
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <vfprintf+0x2d2>
 3ce:	20 e1       	ldi	r18, 0x10	; 16
 3d0:	32 e0       	ldi	r19, 0x02	; 2
 3d2:	f7 01       	movw	r30, r14
 3d4:	a7 fe       	sbrs	r10, 7
 3d6:	08 c0       	rjmp	.+16     	; 0x3e8 <vfprintf+0x2e8>
 3d8:	60 81       	ld	r22, Z
 3da:	71 81       	ldd	r23, Z+1	; 0x01
 3dc:	82 81       	ldd	r24, Z+2	; 0x02
 3de:	93 81       	ldd	r25, Z+3	; 0x03
 3e0:	a7 01       	movw	r20, r14
 3e2:	4c 5f       	subi	r20, 0xFC	; 252
 3e4:	5f 4f       	sbci	r21, 0xFF	; 255
 3e6:	07 c0       	rjmp	.+14     	; 0x3f6 <vfprintf+0x2f6>
 3e8:	60 81       	ld	r22, Z
 3ea:	71 81       	ldd	r23, Z+1	; 0x01
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	a7 01       	movw	r20, r14
 3f2:	4e 5f       	subi	r20, 0xFE	; 254
 3f4:	5f 4f       	sbci	r21, 0xFF	; 255
 3f6:	7a 01       	movw	r14, r20
 3f8:	ae 01       	movw	r20, r28
 3fa:	4f 5f       	subi	r20, 0xFF	; 255
 3fc:	5f 4f       	sbci	r21, 0xFF	; 255
 3fe:	0e 94 a8 02 	call	0x550	; 0x550 <__ultoa_invert>
 402:	48 2e       	mov	r4, r24
 404:	5c 85       	ldd	r21, Y+12	; 0x0c
 406:	45 1a       	sub	r4, r21
 408:	8a 2d       	mov	r24, r10
 40a:	8f 77       	andi	r24, 0x7F	; 127
 40c:	38 2e       	mov	r3, r24
 40e:	36 fe       	sbrs	r3, 6
 410:	0d c0       	rjmp	.+26     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 412:	93 2d       	mov	r25, r3
 414:	9e 7f       	andi	r25, 0xFE	; 254
 416:	a9 2e       	mov	r10, r25
 418:	4b 14       	cp	r4, r11
 41a:	58 f4       	brcc	.+22     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 41c:	34 fe       	sbrs	r3, 4
 41e:	0b c0       	rjmp	.+22     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 420:	32 fc       	sbrc	r3, 2
 422:	09 c0       	rjmp	.+18     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 424:	a3 2d       	mov	r26, r3
 426:	ae 7e       	andi	r26, 0xEE	; 238
 428:	aa 2e       	mov	r10, r26
 42a:	05 c0       	rjmp	.+10     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 42c:	14 2d       	mov	r17, r4
 42e:	a3 2c       	mov	r10, r3
 430:	03 c0       	rjmp	.+6      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 432:	14 2d       	mov	r17, r4
 434:	01 c0       	rjmp	.+2      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 436:	1b 2d       	mov	r17, r11
 438:	a4 fe       	sbrs	r10, 4
 43a:	0e c0       	rjmp	.+28     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 43c:	fe 01       	movw	r30, r28
 43e:	e4 0d       	add	r30, r4
 440:	f1 1d       	adc	r31, r1
 442:	80 81       	ld	r24, Z
 444:	80 33       	cpi	r24, 0x30	; 48
 446:	21 f4       	brne	.+8      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 448:	ea 2d       	mov	r30, r10
 44a:	e9 7e       	andi	r30, 0xE9	; 233
 44c:	ae 2e       	mov	r10, r30
 44e:	08 c0       	rjmp	.+16     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 450:	a2 fe       	sbrs	r10, 2
 452:	05 c0       	rjmp	.+10     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 454:	1e 5f       	subi	r17, 0xFE	; 254
 456:	04 c0       	rjmp	.+8      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 458:	8a 2d       	mov	r24, r10
 45a:	86 78       	andi	r24, 0x86	; 134
 45c:	09 f0       	breq	.+2      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 45e:	1f 5f       	subi	r17, 0xFF	; 255
 460:	a3 fc       	sbrc	r10, 3
 462:	11 c0       	rjmp	.+34     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 464:	a0 fe       	sbrs	r10, 0
 466:	06 c0       	rjmp	.+12     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 468:	10 17       	cp	r17, r16
 46a:	88 f4       	brcc	.+34     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 46c:	04 0d       	add	r16, r4
 46e:	b0 2e       	mov	r11, r16
 470:	b1 1a       	sub	r11, r17
 472:	0e c0       	rjmp	.+28     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 474:	10 17       	cp	r17, r16
 476:	60 f4       	brcc	.+24     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 478:	b6 01       	movw	r22, r12
 47a:	80 e2       	ldi	r24, 0x20	; 32
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	0e 94 8f 03 	call	0x71e	; 0x71e <fputc>
 482:	1f 5f       	subi	r17, 0xFF	; 255
 484:	f7 cf       	rjmp	.-18     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 486:	10 17       	cp	r17, r16
 488:	18 f4       	brcc	.+6      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 48a:	01 1b       	sub	r16, r17
 48c:	02 c0       	rjmp	.+4      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 48e:	b4 2c       	mov	r11, r4
 490:	00 e0       	ldi	r16, 0x00	; 0
 492:	a4 fe       	sbrs	r10, 4
 494:	10 c0       	rjmp	.+32     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 496:	b6 01       	movw	r22, r12
 498:	80 e3       	ldi	r24, 0x30	; 48
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	0e 94 8f 03 	call	0x71e	; 0x71e <fputc>
 4a0:	a2 fe       	sbrs	r10, 2
 4a2:	17 c0       	rjmp	.+46     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 4a4:	a1 fc       	sbrc	r10, 1
 4a6:	03 c0       	rjmp	.+6      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 4a8:	88 e7       	ldi	r24, 0x78	; 120
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 4ae:	88 e5       	ldi	r24, 0x58	; 88
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	b6 01       	movw	r22, r12
 4b4:	0c c0       	rjmp	.+24     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 4b6:	8a 2d       	mov	r24, r10
 4b8:	86 78       	andi	r24, 0x86	; 134
 4ba:	59 f0       	breq	.+22     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 4bc:	a1 fe       	sbrs	r10, 1
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 4c0:	8b e2       	ldi	r24, 0x2B	; 43
 4c2:	01 c0       	rjmp	.+2      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4c4:	80 e2       	ldi	r24, 0x20	; 32
 4c6:	a7 fc       	sbrc	r10, 7
 4c8:	8d e2       	ldi	r24, 0x2D	; 45
 4ca:	b6 01       	movw	r22, r12
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	0e 94 8f 03 	call	0x71e	; 0x71e <fputc>
 4d2:	4b 14       	cp	r4, r11
 4d4:	38 f4       	brcc	.+14     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4d6:	b6 01       	movw	r22, r12
 4d8:	80 e3       	ldi	r24, 0x30	; 48
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	0e 94 8f 03 	call	0x71e	; 0x71e <fputc>
 4e0:	ba 94       	dec	r11
 4e2:	f7 cf       	rjmp	.-18     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 4e4:	4a 94       	dec	r4
 4e6:	e1 e0       	ldi	r30, 0x01	; 1
 4e8:	f0 e0       	ldi	r31, 0x00	; 0
 4ea:	ec 0f       	add	r30, r28
 4ec:	fd 1f       	adc	r31, r29
 4ee:	e4 0d       	add	r30, r4
 4f0:	f1 1d       	adc	r31, r1
 4f2:	80 81       	ld	r24, Z
 4f4:	b6 01       	movw	r22, r12
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	0e 94 8f 03 	call	0x71e	; 0x71e <fputc>
 4fc:	41 10       	cpse	r4, r1
 4fe:	f2 cf       	rjmp	.-28     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 500:	00 23       	and	r16, r16
 502:	09 f4       	brne	.+2      	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 504:	2c ce       	rjmp	.-936    	; 0x15e <vfprintf+0x5e>
 506:	b6 01       	movw	r22, r12
 508:	80 e2       	ldi	r24, 0x20	; 32
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	0e 94 8f 03 	call	0x71e	; 0x71e <fputc>
 510:	01 50       	subi	r16, 0x01	; 1
 512:	f6 cf       	rjmp	.-20     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 514:	f6 01       	movw	r30, r12
 516:	87 81       	ldd	r24, Z+7	; 0x07
 518:	90 85       	ldd	r25, Z+8	; 0x08
 51a:	02 c0       	rjmp	.+4      	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
 51c:	8f ef       	ldi	r24, 0xFF	; 255
 51e:	9f ef       	ldi	r25, 0xFF	; 255
 520:	62 96       	adiw	r28, 0x12	; 18
 522:	0f b6       	in	r0, 0x3f	; 63
 524:	f8 94       	cli
 526:	de bf       	out	0x3e, r29	; 62
 528:	0f be       	out	0x3f, r0	; 63
 52a:	cd bf       	out	0x3d, r28	; 61
 52c:	df 91       	pop	r29
 52e:	cf 91       	pop	r28
 530:	1f 91       	pop	r17
 532:	0f 91       	pop	r16
 534:	ff 90       	pop	r15
 536:	ef 90       	pop	r14
 538:	df 90       	pop	r13
 53a:	cf 90       	pop	r12
 53c:	bf 90       	pop	r11
 53e:	af 90       	pop	r10
 540:	9f 90       	pop	r9
 542:	8f 90       	pop	r8
 544:	7f 90       	pop	r7
 546:	6f 90       	pop	r6
 548:	4f 90       	pop	r4
 54a:	3f 90       	pop	r3
 54c:	2f 90       	pop	r2
 54e:	08 95       	ret

Disassembly of section .text.avrlibc:

000007f6 <strnlen>:
 7f6:	cf 92       	push	r12
 7f8:	df 92       	push	r13
 7fa:	ef 92       	push	r14
 7fc:	6b 01       	movw	r12, r22
 7fe:	e8 2e       	mov	r14, r24
 800:	9a 01       	movw	r18, r20
 802:	a8 2f       	mov	r26, r24
 804:	cb 01       	movw	r24, r22
 806:	21 15       	cp	r18, r1
 808:	31 05       	cpc	r19, r1
 80a:	31 f4       	brne	.+12     	; 0x818 <strnlen+0x22>
 80c:	8c 19       	sub	r24, r12
 80e:	9d 09       	sbc	r25, r13
 810:	ef 90       	pop	r14
 812:	df 90       	pop	r13
 814:	cf 90       	pop	r12
 816:	08 95       	ret
 818:	fc 01       	movw	r30, r24
 81a:	5a 2f       	mov	r21, r26
 81c:	0e 94 92 04 	call	0x924	; 0x924 <__xload_1>
 820:	66 23       	and	r22, r22
 822:	a1 f3       	breq	.-24     	; 0x80c <strnlen+0x16>
 824:	01 96       	adiw	r24, 0x01	; 1
 826:	a1 1d       	adc	r26, r1
 828:	21 50       	subi	r18, 0x01	; 1
 82a:	31 09       	sbc	r19, r1
 82c:	ec cf       	rjmp	.-40     	; 0x806 <strnlen+0x10>

Disassembly of section .text.avrlibc:

0000071e <fputc>:
 71e:	0f 93       	push	r16
 720:	1f 93       	push	r17
 722:	cf 93       	push	r28
 724:	df 93       	push	r29
 726:	fb 01       	movw	r30, r22
 728:	24 81       	ldd	r18, Z+4	; 0x04
 72a:	21 fd       	sbrc	r18, 1
 72c:	03 c0       	rjmp	.+6      	; 0x734 <fputc+0x16>
 72e:	8f ef       	ldi	r24, 0xFF	; 255
 730:	9f ef       	ldi	r25, 0xFF	; 255
 732:	2c c0       	rjmp	.+88     	; 0x78c <fputc+0x6e>
 734:	22 ff       	sbrs	r18, 2
 736:	16 c0       	rjmp	.+44     	; 0x764 <fputc+0x46>
 738:	47 81       	ldd	r20, Z+7	; 0x07
 73a:	50 85       	ldd	r21, Z+8	; 0x08
 73c:	25 81       	ldd	r18, Z+5	; 0x05
 73e:	36 81       	ldd	r19, Z+6	; 0x06
 740:	42 17       	cp	r20, r18
 742:	53 07       	cpc	r21, r19
 744:	44 f4       	brge	.+16     	; 0x756 <fputc+0x38>
 746:	a0 81       	ld	r26, Z
 748:	b1 81       	ldd	r27, Z+1	; 0x01
 74a:	9d 01       	movw	r18, r26
 74c:	2f 5f       	subi	r18, 0xFF	; 255
 74e:	3f 4f       	sbci	r19, 0xFF	; 255
 750:	31 83       	std	Z+1, r19	; 0x01
 752:	20 83       	st	Z, r18
 754:	8c 93       	st	X, r24
 756:	27 81       	ldd	r18, Z+7	; 0x07
 758:	30 85       	ldd	r19, Z+8	; 0x08
 75a:	2f 5f       	subi	r18, 0xFF	; 255
 75c:	3f 4f       	sbci	r19, 0xFF	; 255
 75e:	30 87       	std	Z+8, r19	; 0x08
 760:	27 83       	std	Z+7, r18	; 0x07
 762:	14 c0       	rjmp	.+40     	; 0x78c <fputc+0x6e>
 764:	8b 01       	movw	r16, r22
 766:	ec 01       	movw	r28, r24
 768:	fb 01       	movw	r30, r22
 76a:	01 84       	ldd	r0, Z+9	; 0x09
 76c:	f2 85       	ldd	r31, Z+10	; 0x0a
 76e:	e0 2d       	mov	r30, r0
 770:	09 95       	icall
 772:	89 2b       	or	r24, r25
 774:	e1 f6       	brne	.-72     	; 0x72e <fputc+0x10>
 776:	d8 01       	movw	r26, r16
 778:	17 96       	adiw	r26, 0x07	; 7
 77a:	8d 91       	ld	r24, X+
 77c:	9c 91       	ld	r25, X
 77e:	18 97       	sbiw	r26, 0x08	; 8
 780:	01 96       	adiw	r24, 0x01	; 1
 782:	18 96       	adiw	r26, 0x08	; 8
 784:	9c 93       	st	X, r25
 786:	8e 93       	st	-X, r24
 788:	17 97       	sbiw	r26, 0x07	; 7
 78a:	ce 01       	movw	r24, r28
 78c:	df 91       	pop	r29
 78e:	cf 91       	pop	r28
 790:	1f 91       	pop	r17
 792:	0f 91       	pop	r16
 794:	08 95       	ret

Disassembly of section .text.avrlibc:

00000550 <__ultoa_invert>:
 550:	fa 01       	movw	r30, r20
 552:	aa 27       	eor	r26, r26
 554:	28 30       	cpi	r18, 0x08	; 8
 556:	51 f1       	breq	.+84     	; 0x5ac <__ultoa_invert+0x5c>
 558:	20 31       	cpi	r18, 0x10	; 16
 55a:	81 f1       	breq	.+96     	; 0x5bc <__ultoa_invert+0x6c>
 55c:	e8 94       	clt
 55e:	6f 93       	push	r22
 560:	6e 7f       	andi	r22, 0xFE	; 254
 562:	6e 5f       	subi	r22, 0xFE	; 254
 564:	7f 4f       	sbci	r23, 0xFF	; 255
 566:	8f 4f       	sbci	r24, 0xFF	; 255
 568:	9f 4f       	sbci	r25, 0xFF	; 255
 56a:	af 4f       	sbci	r26, 0xFF	; 255
 56c:	b1 e0       	ldi	r27, 0x01	; 1
 56e:	3e d0       	rcall	.+124    	; 0x5ec <__ultoa_invert+0x9c>
 570:	b4 e0       	ldi	r27, 0x04	; 4
 572:	3c d0       	rcall	.+120    	; 0x5ec <__ultoa_invert+0x9c>
 574:	67 0f       	add	r22, r23
 576:	78 1f       	adc	r23, r24
 578:	89 1f       	adc	r24, r25
 57a:	9a 1f       	adc	r25, r26
 57c:	a1 1d       	adc	r26, r1
 57e:	68 0f       	add	r22, r24
 580:	79 1f       	adc	r23, r25
 582:	8a 1f       	adc	r24, r26
 584:	91 1d       	adc	r25, r1
 586:	a1 1d       	adc	r26, r1
 588:	6a 0f       	add	r22, r26
 58a:	71 1d       	adc	r23, r1
 58c:	81 1d       	adc	r24, r1
 58e:	91 1d       	adc	r25, r1
 590:	a1 1d       	adc	r26, r1
 592:	20 d0       	rcall	.+64     	; 0x5d4 <__ultoa_invert+0x84>
 594:	09 f4       	brne	.+2      	; 0x598 <__ultoa_invert+0x48>
 596:	68 94       	set
 598:	3f 91       	pop	r19
 59a:	2a e0       	ldi	r18, 0x0A	; 10
 59c:	26 9f       	mul	r18, r22
 59e:	11 24       	eor	r1, r1
 5a0:	30 19       	sub	r19, r0
 5a2:	30 5d       	subi	r19, 0xD0	; 208
 5a4:	31 93       	st	Z+, r19
 5a6:	de f6       	brtc	.-74     	; 0x55e <__ultoa_invert+0xe>
 5a8:	cf 01       	movw	r24, r30
 5aa:	08 95       	ret
 5ac:	46 2f       	mov	r20, r22
 5ae:	47 70       	andi	r20, 0x07	; 7
 5b0:	40 5d       	subi	r20, 0xD0	; 208
 5b2:	41 93       	st	Z+, r20
 5b4:	b3 e0       	ldi	r27, 0x03	; 3
 5b6:	0f d0       	rcall	.+30     	; 0x5d6 <__ultoa_invert+0x86>
 5b8:	c9 f7       	brne	.-14     	; 0x5ac <__ultoa_invert+0x5c>
 5ba:	f6 cf       	rjmp	.-20     	; 0x5a8 <__ultoa_invert+0x58>
 5bc:	46 2f       	mov	r20, r22
 5be:	4f 70       	andi	r20, 0x0F	; 15
 5c0:	40 5d       	subi	r20, 0xD0	; 208
 5c2:	4a 33       	cpi	r20, 0x3A	; 58
 5c4:	18 f0       	brcs	.+6      	; 0x5cc <__ultoa_invert+0x7c>
 5c6:	49 5d       	subi	r20, 0xD9	; 217
 5c8:	31 fd       	sbrc	r19, 1
 5ca:	40 52       	subi	r20, 0x20	; 32
 5cc:	41 93       	st	Z+, r20
 5ce:	02 d0       	rcall	.+4      	; 0x5d4 <__ultoa_invert+0x84>
 5d0:	a9 f7       	brne	.-22     	; 0x5bc <__ultoa_invert+0x6c>
 5d2:	ea cf       	rjmp	.-44     	; 0x5a8 <__ultoa_invert+0x58>
 5d4:	b4 e0       	ldi	r27, 0x04	; 4
 5d6:	a6 95       	lsr	r26
 5d8:	97 95       	ror	r25
 5da:	87 95       	ror	r24
 5dc:	77 95       	ror	r23
 5de:	67 95       	ror	r22
 5e0:	ba 95       	dec	r27
 5e2:	c9 f7       	brne	.-14     	; 0x5d6 <__ultoa_invert+0x86>
 5e4:	00 97       	sbiw	r24, 0x00	; 0
 5e6:	61 05       	cpc	r22, r1
 5e8:	71 05       	cpc	r23, r1
 5ea:	08 95       	ret
 5ec:	9b 01       	movw	r18, r22
 5ee:	ac 01       	movw	r20, r24
 5f0:	0a 2e       	mov	r0, r26
 5f2:	06 94       	lsr	r0
 5f4:	57 95       	ror	r21
 5f6:	47 95       	ror	r20
 5f8:	37 95       	ror	r19
 5fa:	27 95       	ror	r18
 5fc:	ba 95       	dec	r27
 5fe:	c9 f7       	brne	.-14     	; 0x5f2 <__ultoa_invert+0xa2>
 600:	62 0f       	add	r22, r18
 602:	73 1f       	adc	r23, r19
 604:	84 1f       	adc	r24, r20
 606:	95 1f       	adc	r25, r21
 608:	a0 1d       	adc	r26, r0
 60a:	08 95       	ret

Disassembly of section .text.libgcc:

00000924 <__xload_1>:
 924:	57 fd       	sbrc	r21, 7
 926:	03 c0       	rjmp	.+6      	; 0x92e <__xload_1+0xa>
 928:	5b bf       	out	0x3b, r21	; 59
 92a:	67 91       	elpm	r22, Z+
 92c:	08 95       	ret
 92e:	60 81       	ld	r22, Z
 930:	08 95       	ret
