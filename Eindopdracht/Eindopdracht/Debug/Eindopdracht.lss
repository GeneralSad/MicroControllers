
Eindopdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000f0f  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000068  00800100  00800100  00000f0f  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  00000f0f  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001f0  00000000  00000000  00000f6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002f79  00000000  00000000  0000115a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000da2  00000000  00000000  000040d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001103  00000000  00000000  00004e75  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000050c  00000000  00000000  00005f78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000351  00000000  00000000  00006484  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000012bb  00000000  00000000  000067d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001c0  00000000  00000000  00007a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000e76  00000e76  00000f0a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00007c50  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.twi_init 0000000c  00000e3a  00000e3a  00000ece  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.twi_start 00000010  00000e0e  00000e0e  00000ea2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.twi_stop 00000008  00000e66  00000e66  00000efa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.twi_tx  00000014  00000dfa  00000dfa  00000e8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.displayInitHT16K33 00000096  00000844  00000844  000008d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.displayInit 0000000c  00000e46  00000e46  00000eda  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.display 0000004a  00000b1a  00000b1a  00000bae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.displayChar 00000038  00000ba6  00000ba6  00000c3a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .progmem0.data.font 000003f8  000000f0  000000f0  00000184  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEM0
 23 .text.lcd_strobe_lcd_e 0000001e  00000cfa  00000cfa  00000d8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.lcd_write_cmd 00000024  00000c6e  00000c6e  00000d02  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.lcd_write_data 00000024  00000c92  00000c92  00000d26  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.lcd_write_string 0000001a  00000dc6  00000dc6  00000e5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.lcd_set_cursor 00000008  00000e6e  00000e6e  00000f02  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .progmemx.data 00000011  0000054d  0000054d  000005e1  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 29 .text.lcd_init 00000096  000008da  000008da  0000096e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.lcd_display_text 00000022  00000cb6  00000cb6  00000d4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.resetHolder 0000001a  00000de0  00000de0  00000e74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.test_write 00000032  00000c16  00000c16  00000caa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .progmemx.data 00000065  000004e8  000004e8  0000057c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 34 .text.cardScanInit 0000007c  00000970  00000970  00000a04  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.convertSerialN 00000042  00000b64  00000b64  00000bf8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.readSerial 0000001c  00000d72  00000d72  00000e06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.scanCard 00000038  00000bde  00000bde  00000c72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.main    000000fe  00000746  00000746  000007da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .bss.userPrompted 00000002  0080016c  0080016c  00000f0f  2**0
                  ALLOC
 40 .bss.key      00000004  00800168  00800168  00000f0f  2**0
                  ALLOC
 41 .data.byte    00000001  0080016e  00000e7a  00000f0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 42 .text.mfrc522_write 00000026  00000c48  00000c48  00000cdc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.mfrc522_read 00000022  00000cd8  00000cd8  00000d6c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.MFRC522_SetBitMask 0000001c  00000d8e  00000d8e  00000e22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.MFRC522_ClearBitMask 0000001e  00000d18  00000d18  00000dac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.mfrc522_reset 0000000a  00000e52  00000e52  00000ee6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.mfrc522_init 0000004c  00000ace  00000ace  00000b62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.mfrc522_to_card 000001e8  0000055e  0000055e  000005f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.mfrc522_request 0000006a  00000a64  00000a64  00000af8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.mfrc522_get_card_serial 00000078  000009ec  000009ec  00000a80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.spi_masterInit 0000000e  00000e1e  00000e1e  00000eb2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.spi_transmit 0000000a  00000e5c  00000e5c  00000ef0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.wait    0000001e  00000d36  00000d36  00000dca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.libgcc  0000001c  00000daa  00000daa  00000e3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.avrlibc 0000001e  00000d54  00000d54  00000de8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.libgcc  0000000e  00000e2c  00000e2c  00000ec0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__bad_interrupt>
   8:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__bad_interrupt>
   c:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__bad_interrupt>
  10:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__bad_interrupt>
  14:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__bad_interrupt>
  18:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__bad_interrupt>
  1c:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__bad_interrupt>
  20:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__bad_interrupt>
  24:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__bad_interrupt>
  28:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__bad_interrupt>
  2c:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__bad_interrupt>
  30:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__bad_interrupt>
  34:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__bad_interrupt>
  38:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__bad_interrupt>
  3c:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__bad_interrupt>
  40:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__bad_interrupt>
  44:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__bad_interrupt>
  48:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__bad_interrupt>
  4c:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__bad_interrupt>
  50:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__bad_interrupt>
  54:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__bad_interrupt>
  58:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__bad_interrupt>
  5c:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__bad_interrupt>
  60:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__bad_interrupt>
  64:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__bad_interrupt>
  68:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__bad_interrupt>
  6c:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__bad_interrupt>
  70:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__bad_interrupt>
  74:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__bad_interrupt>
  78:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__bad_interrupt>
  7c:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__bad_interrupt>
  80:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__bad_interrupt>
  84:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__bad_interrupt>
  88:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 6e       	ori	r16, 0xE1	; 225
  90:	80 01       	movw	r16, r0
  92:	6e 01       	movw	r12, r28
  94:	6f 00       	.word	0x006f	; ????
  96:	0e 7a       	andi	r16, 0xAE	; 174

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e1       	ldi	r29, 0x10	; 16
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	ec e8       	ldi	r30, 0x8C	; 140
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	19 c0       	rjmp	.+50     	; 0xde <__do_clear_bss+0x8>
  ac:	b7 91       	elpm	r27, Z+
  ae:	a7 91       	elpm	r26, Z+
  b0:	37 91       	elpm	r19, Z+
  b2:	27 91       	elpm	r18, Z+
  b4:	07 91       	elpm	r16, Z+
  b6:	07 fd       	sbrc	r16, 7
  b8:	0e c0       	rjmp	.+28     	; 0xd6 <__do_clear_bss>
  ba:	97 91       	elpm	r25, Z+
  bc:	87 91       	elpm	r24, Z+
  be:	ef 01       	movw	r28, r30
  c0:	f9 2f       	mov	r31, r25
  c2:	e8 2f       	mov	r30, r24
  c4:	0b bf       	out	0x3b, r16	; 59
  c6:	07 90       	elpm	r0, Z+
  c8:	0d 92       	st	X+, r0
  ca:	a2 17       	cp	r26, r18
  cc:	b3 07       	cpc	r27, r19
  ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0x22>
  d0:	fe 01       	movw	r30, r28
  d2:	1b be       	out	0x3b, r1	; 59
  d4:	04 c0       	rjmp	.+8      	; 0xde <__do_clear_bss+0x8>

000000d6 <__do_clear_bss>:
  d6:	1d 92       	st	X+, r1
  d8:	a2 17       	cp	r26, r18
  da:	b3 07       	cpc	r27, r19
  dc:	e1 f7       	brne	.-8      	; 0xd6 <__do_clear_bss>
  de:	e8 39       	cpi	r30, 0x98	; 152
  e0:	f4 07       	cpc	r31, r20
  e2:	21 f7       	brne	.-56     	; 0xac <__do_copy_data+0x8>
  e4:	0e 94 a3 03 	call	0x746	; 0x746 <main>
  e8:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>

Disassembly of section .text:

00000e76 <__bad_interrupt>:
 e76:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.twi_init:

00000e3a <twi_init>:
notes:			TWI clock is set to 100 kHz
Version :    	DMK, Initial code
*******************************************************************/
void twi_init(void)
{
	TWSR = 0;
 e3a:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
	TWBR = 32;	 // TWI clock set to 100kHz, prescaler = 0
 e3e:	80 e2       	ldi	r24, 0x20	; 32
 e40:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 e44:	08 95       	ret

Disassembly of section .text.twi_start:

00000e0e <twi_start>:
outputs:
notes:		Maakt gebruik van displayChar(..)
Version:	DMK, Initial code
*******************************************************************/
void displayString(char *str, uint8_t x, uint8_t y)
{
 e0e:	84 ea       	ldi	r24, 0xA4	; 164
 e10:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 e14:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 e18:	88 23       	and	r24, r24
 e1a:	e4 f7       	brge	.-8      	; 0xe14 <twi_start+0x6>
 e1c:	08 95       	ret

Disassembly of section .text.twi_stop:

00000e66 <twi_stop>:
notes:
Version :    	DMK, Initial code
*******************************************************************/
void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 e66:	84 e9       	ldi	r24, 0x94	; 148
 e68:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 e6c:	08 95       	ret

Disassembly of section .text.twi_tx:

00000dfa <twi_tx>:
outputs:
notes:		Maakt gebruik van displayChar(..)
Version:	DMK, Initial code
*******************************************************************/
void displayString(char *str, uint8_t x, uint8_t y)
{
 dfa:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 dfe:	84 e8       	ldi	r24, 0x84	; 132
 e00:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 e04:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 e08:	88 23       	and	r24, r24
 e0a:	e4 f7       	brge	.-8      	; 0xe04 <twi_tx+0xa>
 e0c:	08 95       	ret

Disassembly of section .text.displayInitHT16K33:

00000844 <displayInitHT16K33>:
 844:	cf 93       	push	r28
 846:	df 93       	push	r29
 848:	c8 2f       	mov	r28, r24
 84a:	0e 94 07 07 	call	0xe0e	; 0xe0e <twi_start>
 84e:	8c 2f       	mov	r24, r28
 850:	0e 94 fd 06 	call	0xdfa	; 0xdfa <twi_tx>
 854:	81 e2       	ldi	r24, 0x21	; 33
 856:	0e 94 fd 06 	call	0xdfa	; 0xdfa <twi_tx>
 85a:	0e 94 33 07 	call	0xe66	; 0xe66 <twi_stop>
 85e:	0e 94 07 07 	call	0xe0e	; 0xe0e <twi_start>
 862:	8c 2f       	mov	r24, r28
 864:	0e 94 fd 06 	call	0xdfa	; 0xdfa <twi_tx>
 868:	80 ea       	ldi	r24, 0xA0	; 160
 86a:	0e 94 fd 06 	call	0xdfa	; 0xdfa <twi_tx>
 86e:	0e 94 33 07 	call	0xe66	; 0xe66 <twi_stop>
 872:	0e 94 07 07 	call	0xe0e	; 0xe0e <twi_start>
 876:	8c 2f       	mov	r24, r28
 878:	0e 94 fd 06 	call	0xdfa	; 0xdfa <twi_tx>
 87c:	81 ee       	ldi	r24, 0xE1	; 225
 87e:	0e 94 fd 06 	call	0xdfa	; 0xdfa <twi_tx>
 882:	0e 94 33 07 	call	0xe66	; 0xe66 <twi_stop>
 886:	0e 94 07 07 	call	0xe0e	; 0xe0e <twi_start>
 88a:	8c 2f       	mov	r24, r28
 88c:	0e 94 fd 06 	call	0xdfa	; 0xdfa <twi_tx>
 890:	81 e8       	ldi	r24, 0x81	; 129
 892:	0e 94 fd 06 	call	0xdfa	; 0xdfa <twi_tx>
 896:	0e 94 33 07 	call	0xe66	; 0xe66 <twi_stop>
 89a:	0e 94 07 07 	call	0xe0e	; 0xe0e <twi_start>
 89e:	8c 2f       	mov	r24, r28
 8a0:	0e 94 fd 06 	call	0xdfa	; 0xdfa <twi_tx>
 8a4:	80 e0       	ldi	r24, 0x00	; 0
 8a6:	0e 94 fd 06 	call	0xdfa	; 0xdfa <twi_tx>
 8aa:	d0 e0       	ldi	r29, 0x00	; 0
 8ac:	c5 e5       	ldi	r28, 0x55	; 85
 8ae:	0e c0       	rjmp	.+28     	; 0x8cc <displayInitHT16K33+0x88>
 8b0:	c0 95       	com	r28
 8b2:	20 e8       	ldi	r18, 0x80	; 128
 8b4:	c2 9f       	mul	r28, r18
 8b6:	c0 01       	movw	r24, r0
 8b8:	11 24       	eor	r1, r1
 8ba:	9c 2f       	mov	r25, r28
 8bc:	96 95       	lsr	r25
 8be:	89 2b       	or	r24, r25
 8c0:	0e 94 fd 06 	call	0xdfa	; 0xdfa <twi_tx>
 8c4:	80 e0       	ldi	r24, 0x00	; 0
 8c6:	0e 94 fd 06 	call	0xdfa	; 0xdfa <twi_tx>
 8ca:	df 5f       	subi	r29, 0xFF	; 255
 8cc:	d8 30       	cpi	r29, 0x08	; 8
 8ce:	80 f3       	brcs	.-32     	; 0x8b0 <displayInitHT16K33+0x6c>
 8d0:	0e 94 33 07 	call	0xe66	; 0xe66 <twi_stop>
 8d4:	df 91       	pop	r29
 8d6:	cf 91       	pop	r28
 8d8:	08 95       	ret

Disassembly of section .text.displayInit:

00000e46 <displayInit>:
notes:			Init display
Version :    	DMK, Initial code
*******************************************************************/
void displayInit(void) 
{
	twi_init();							// Enable TWI interface
 e46:	0e 94 1d 07 	call	0xe3a	; 0xe3a <twi_init>
	displayInitHT16K33(D0_I2C_ADDR);	// Iit display
 e4a:	84 ee       	ldi	r24, 0xE4	; 228
 e4c:	0e 94 22 04 	call	0x844	; 0x844 <displayInitHT16K33>
 e50:	08 95       	ret

Disassembly of section .text.display:

00000b1a <display>:
outputs:
notes:		Maakt gebruik van displayChar(..)
Version:	DMK, Initial code
*******************************************************************/
void displayString(char *str, uint8_t x, uint8_t y)
{
 b1a:	cf 93       	push	r28
 b1c:	0e 94 07 07 	call	0xe0e	; 0xe0e <twi_start>
 b20:	84 ee       	ldi	r24, 0xE4	; 228
 b22:	0e 94 fd 06 	call	0xdfa	; 0xdfa <twi_tx>
 b26:	80 e0       	ldi	r24, 0x00	; 0
 b28:	0e 94 fd 06 	call	0xdfa	; 0xdfa <twi_tx>
 b2c:	c0 e0       	ldi	r28, 0x00	; 0
 b2e:	14 c0       	rjmp	.+40     	; 0xb58 <display+0x3e>
 b30:	e7 e0       	ldi	r30, 0x07	; 7
 b32:	f0 e0       	ldi	r31, 0x00	; 0
 b34:	ec 1b       	sub	r30, r28
 b36:	f1 09       	sbc	r31, r1
 b38:	e0 50       	subi	r30, 0x00	; 0
 b3a:	ff 4f       	sbci	r31, 0xFF	; 255
 b3c:	90 81       	ld	r25, Z
 b3e:	80 e8       	ldi	r24, 0x80	; 128
 b40:	98 9f       	mul	r25, r24
 b42:	90 01       	movw	r18, r0
 b44:	11 24       	eor	r1, r1
 b46:	89 2f       	mov	r24, r25
 b48:	86 95       	lsr	r24
 b4a:	82 2b       	or	r24, r18
 b4c:	0e 94 fd 06 	call	0xdfa	; 0xdfa <twi_tx>
 b50:	80 e0       	ldi	r24, 0x00	; 0
 b52:	0e 94 fd 06 	call	0xdfa	; 0xdfa <twi_tx>
 b56:	cf 5f       	subi	r28, 0xFF	; 255
 b58:	c8 30       	cpi	r28, 0x08	; 8
 b5a:	50 f3       	brcs	.-44     	; 0xb30 <display+0x16>
 b5c:	0e 94 33 07 	call	0xe66	; 0xe66 <twi_stop>
 b60:	cf 91       	pop	r28
 b62:	08 95       	ret

Disassembly of section .text.displayChar:

00000ba6 <displayChar>:
 ba6:	20 e0       	ldi	r18, 0x00	; 0
 ba8:	30 e0       	ldi	r19, 0x00	; 0
 baa:	13 c0       	rjmp	.+38     	; 0xbd2 <displayChar+0x2c>
 bac:	e8 2f       	mov	r30, r24
 bae:	f0 e0       	ldi	r31, 0x00	; 0
 bb0:	ee 0f       	add	r30, r30
 bb2:	ff 1f       	adc	r31, r31
 bb4:	ee 0f       	add	r30, r30
 bb6:	ff 1f       	adc	r31, r31
 bb8:	ee 0f       	add	r30, r30
 bba:	ff 1f       	adc	r31, r31
 bbc:	e0 51       	subi	r30, 0x10	; 16
 bbe:	ff 4f       	sbci	r31, 0xFF	; 255
 bc0:	e2 0f       	add	r30, r18
 bc2:	f3 1f       	adc	r31, r19
 bc4:	94 91       	lpm	r25, Z
 bc6:	f9 01       	movw	r30, r18
 bc8:	e0 50       	subi	r30, 0x00	; 0
 bca:	ff 4f       	sbci	r31, 0xFF	; 255
 bcc:	90 83       	st	Z, r25
 bce:	2f 5f       	subi	r18, 0xFF	; 255
 bd0:	3f 4f       	sbci	r19, 0xFF	; 255
 bd2:	28 30       	cpi	r18, 0x08	; 8
 bd4:	31 05       	cpc	r19, r1
 bd6:	54 f3       	brlt	.-44     	; 0xbac <displayChar+0x6>
 bd8:	0e 94 8d 05 	call	0xb1a	; 0xb1a <display>
 bdc:	08 95       	ret

Disassembly of section .text.lcd_strobe_lcd_e:

00000cfa <lcd_strobe_lcd_e>:
 cfa:	85 b3       	in	r24, 0x15	; 21
 cfc:	88 60       	ori	r24, 0x08	; 8
 cfe:	85 bb       	out	0x15, r24	; 21
 d00:	81 e0       	ldi	r24, 0x01	; 1
 d02:	90 e0       	ldi	r25, 0x00	; 0
 d04:	0e 94 9b 06 	call	0xd36	; 0xd36 <wait>
 d08:	85 b3       	in	r24, 0x15	; 21
 d0a:	87 7f       	andi	r24, 0xF7	; 247
 d0c:	85 bb       	out	0x15, r24	; 21
 d0e:	81 e0       	ldi	r24, 0x01	; 1
 d10:	90 e0       	ldi	r25, 0x00	; 0
 d12:	0e 94 9b 06 	call	0xd36	; 0xd36 <wait>
 d16:	08 95       	ret

Disassembly of section .text.lcd_write_cmd:

00000c6e <lcd_write_cmd>:
 c6e:	cf 93       	push	r28
 c70:	c8 2f       	mov	r28, r24
 c72:	85 bb       	out	0x15, r24	; 21
 c74:	85 b3       	in	r24, 0x15	; 21
 c76:	8b 7f       	andi	r24, 0xFB	; 251
 c78:	85 bb       	out	0x15, r24	; 21
 c7a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <lcd_strobe_lcd_e>
 c7e:	c2 95       	swap	r28
 c80:	c0 7f       	andi	r28, 0xF0	; 240
 c82:	c5 bb       	out	0x15, r28	; 21
 c84:	85 b3       	in	r24, 0x15	; 21
 c86:	8b 7f       	andi	r24, 0xFB	; 251
 c88:	85 bb       	out	0x15, r24	; 21
 c8a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <lcd_strobe_lcd_e>
 c8e:	cf 91       	pop	r28
 c90:	08 95       	ret

Disassembly of section .text.lcd_write_data:

00000c92 <lcd_write_data>:
 c92:	cf 93       	push	r28
 c94:	c8 2f       	mov	r28, r24
 c96:	85 bb       	out	0x15, r24	; 21
 c98:	85 b3       	in	r24, 0x15	; 21
 c9a:	84 60       	ori	r24, 0x04	; 4
 c9c:	85 bb       	out	0x15, r24	; 21
 c9e:	0e 94 7d 06 	call	0xcfa	; 0xcfa <lcd_strobe_lcd_e>
 ca2:	c2 95       	swap	r28
 ca4:	c0 7f       	andi	r28, 0xF0	; 240
 ca6:	c5 bb       	out	0x15, r28	; 21
 ca8:	85 b3       	in	r24, 0x15	; 21
 caa:	84 60       	ori	r24, 0x04	; 4
 cac:	85 bb       	out	0x15, r24	; 21
 cae:	0e 94 7d 06 	call	0xcfa	; 0xcfa <lcd_strobe_lcd_e>
 cb2:	cf 91       	pop	r28
 cb4:	08 95       	ret

Disassembly of section .text.lcd_write_string:

00000dc6 <lcd_write_string>:
 dc6:	cf 93       	push	r28
 dc8:	df 93       	push	r29
 dca:	ec 01       	movw	r28, r24
 dcc:	03 c0       	rjmp	.+6      	; 0xdd4 <lcd_write_string+0xe>
 dce:	0e 94 49 06 	call	0xc92	; 0xc92 <lcd_write_data>
 dd2:	21 96       	adiw	r28, 0x01	; 1
 dd4:	88 81       	ld	r24, Y
 dd6:	81 11       	cpse	r24, r1
 dd8:	fa cf       	rjmp	.-12     	; 0xdce <lcd_write_string+0x8>
 dda:	df 91       	pop	r29
 ddc:	cf 91       	pop	r28
 dde:	08 95       	ret

Disassembly of section .text.lcd_set_cursor:

00000e6e <lcd_set_cursor>:
 e6e:	80 68       	ori	r24, 0x80	; 128
 e70:	0e 94 37 06 	call	0xc6e	; 0xc6e <lcd_write_cmd>
 e74:	08 95       	ret

Disassembly of section .text.lcd_init:

000008da <lcd_init>:
 8da:	1f 93       	push	r17
 8dc:	cf 93       	push	r28
 8de:	df 93       	push	r29
 8e0:	cd b7       	in	r28, 0x3d	; 61
 8e2:	de b7       	in	r29, 0x3e	; 62
 8e4:	61 97       	sbiw	r28, 0x11	; 17
 8e6:	0f b6       	in	r0, 0x3f	; 63
 8e8:	f8 94       	cli
 8ea:	de bf       	out	0x3e, r29	; 62
 8ec:	0f be       	out	0x3f, r0	; 63
 8ee:	cd bf       	out	0x3d, r28	; 61
 8f0:	8f ef       	ldi	r24, 0xFF	; 255
 8f2:	84 bb       	out	0x14, r24	; 20
 8f4:	15 ba       	out	0x15, r1	; 21
 8f6:	10 e2       	ldi	r17, 0x20	; 32
 8f8:	15 bb       	out	0x15, r17	; 21
 8fa:	0e 94 7d 06 	call	0xcfa	; 0xcfa <lcd_strobe_lcd_e>
 8fe:	15 bb       	out	0x15, r17	; 21
 900:	0e 94 7d 06 	call	0xcfa	; 0xcfa <lcd_strobe_lcd_e>
 904:	80 e8       	ldi	r24, 0x80	; 128
 906:	85 bb       	out	0x15, r24	; 21
 908:	0e 94 7d 06 	call	0xcfa	; 0xcfa <lcd_strobe_lcd_e>
 90c:	15 ba       	out	0x15, r1	; 21
 90e:	0e 94 7d 06 	call	0xcfa	; 0xcfa <lcd_strobe_lcd_e>
 912:	80 ef       	ldi	r24, 0xF0	; 240
 914:	85 bb       	out	0x15, r24	; 21
 916:	0e 94 7d 06 	call	0xcfa	; 0xcfa <lcd_strobe_lcd_e>
 91a:	15 ba       	out	0x15, r1	; 21
 91c:	0e 94 7d 06 	call	0xcfa	; 0xcfa <lcd_strobe_lcd_e>
 920:	80 e6       	ldi	r24, 0x60	; 96
 922:	85 bb       	out	0x15, r24	; 21
 924:	0e 94 7d 06 	call	0xcfa	; 0xcfa <lcd_strobe_lcd_e>
 928:	2d e4       	ldi	r18, 0x4D	; 77
 92a:	35 e0       	ldi	r19, 0x05	; 5
 92c:	40 e0       	ldi	r20, 0x00	; 0
 92e:	81 e1       	ldi	r24, 0x11	; 17
 930:	f9 01       	movw	r30, r18
 932:	de 01       	movw	r26, r28
 934:	11 96       	adiw	r26, 0x01	; 1
 936:	74 2f       	mov	r23, r20
 938:	0e 94 d5 06 	call	0xdaa	; 0xdaa <__movmemx_qi>
 93c:	80 e0       	ldi	r24, 0x00	; 0
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_set_cursor>
 944:	ce 01       	movw	r24, r28
 946:	01 96       	adiw	r24, 0x01	; 1
 948:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <lcd_write_string>
 94c:	88 e2       	ldi	r24, 0x28	; 40
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_set_cursor>
 954:	ce 01       	movw	r24, r28
 956:	01 96       	adiw	r24, 0x01	; 1
 958:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <lcd_write_string>
 95c:	61 96       	adiw	r28, 0x11	; 17
 95e:	0f b6       	in	r0, 0x3f	; 63
 960:	f8 94       	cli
 962:	de bf       	out	0x3e, r29	; 62
 964:	0f be       	out	0x3f, r0	; 63
 966:	cd bf       	out	0x3d, r28	; 61
 968:	df 91       	pop	r29
 96a:	cf 91       	pop	r28
 96c:	1f 91       	pop	r17
 96e:	08 95       	ret

Disassembly of section .text.lcd_display_text:

00000cb6 <lcd_display_text>:
 cb6:	cf 93       	push	r28
 cb8:	df 93       	push	r29
 cba:	ec 01       	movw	r28, r24
 cbc:	80 e0       	ldi	r24, 0x00	; 0
 cbe:	90 e0       	ldi	r25, 0x00	; 0
 cc0:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_set_cursor>
 cc4:	ce 01       	movw	r24, r28
 cc6:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <lcd_write_string>
 cca:	84 e6       	ldi	r24, 0x64	; 100
 ccc:	90 e0       	ldi	r25, 0x00	; 0
 cce:	0e 94 9b 06 	call	0xd36	; 0xd36 <wait>
 cd2:	df 91       	pop	r29
 cd4:	cf 91       	pop	r28
 cd6:	08 95       	ret

Disassembly of section .text.resetHolder:

00000de0 <resetHolder>:
 de0:	80 e0       	ldi	r24, 0x00	; 0
 de2:	90 e0       	ldi	r25, 0x00	; 0
 de4:	06 c0       	rjmp	.+12     	; 0xdf2 <resetHolder+0x12>
 de6:	fc 01       	movw	r30, r24
 de8:	e8 5f       	subi	r30, 0xF8	; 248
 dea:	fe 4f       	sbci	r31, 0xFE	; 254
 dec:	20 e2       	ldi	r18, 0x20	; 32
 dee:	20 83       	st	Z, r18
 df0:	01 96       	adiw	r24, 0x01	; 1
 df2:	80 31       	cpi	r24, 0x10	; 16
 df4:	91 05       	cpc	r25, r1
 df6:	b8 f3       	brcs	.-18     	; 0xde6 <resetHolder+0x6>
 df8:	08 95       	ret

Disassembly of section .text.test_write:

00000c16 <test_write>:
 c16:	cf 92       	push	r12
 c18:	df 92       	push	r13
 c1a:	ef 92       	push	r14
 c1c:	6b 01       	movw	r12, r22
 c1e:	e8 2e       	mov	r14, r24
 c20:	0e 94 f0 06 	call	0xde0	; 0xde0 <resetHolder>
 c24:	88 e0       	ldi	r24, 0x08	; 8
 c26:	91 e0       	ldi	r25, 0x01	; 1
 c28:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <lcd_display_text>
 c2c:	6e 2d       	mov	r22, r14
 c2e:	a6 01       	movw	r20, r12
 c30:	88 e0       	ldi	r24, 0x08	; 8
 c32:	91 e0       	ldi	r25, 0x01	; 1
 c34:	0e 94 aa 06 	call	0xd54	; 0xd54 <strcpy>
 c38:	88 e0       	ldi	r24, 0x08	; 8
 c3a:	91 e0       	ldi	r25, 0x01	; 1
 c3c:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <lcd_display_text>
 c40:	ef 90       	pop	r14
 c42:	df 90       	pop	r13
 c44:	cf 90       	pop	r12
 c46:	08 95       	ret

Disassembly of section .text.cardScanInit:

00000970 <cardScanInit>:
 970:	0e 94 0f 07 	call	0xe1e	; 0xe1e <spi_masterInit>
 974:	8a e0       	ldi	r24, 0x0A	; 10
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	0e 94 9b 06 	call	0xd36	; 0xd36 <wait>
 97c:	0e 94 67 05 	call	0xace	; 0xace <mfrc522_init>
 980:	87 e3       	ldi	r24, 0x37	; 55
 982:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <mfrc522_read>
 986:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <byte>
 98a:	8a e0       	ldi	r24, 0x0A	; 10
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	0e 94 9b 06 	call	0xd36	; 0xd36 <wait>
 992:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <byte>
 996:	82 39       	cpi	r24, 0x92	; 146
 998:	31 f4       	brne	.+12     	; 0x9a6 <cardScanInit+0x36>
 99a:	6b ee       	ldi	r22, 0xEB	; 235
 99c:	74 e0       	ldi	r23, 0x04	; 4
 99e:	80 e0       	ldi	r24, 0x00	; 0
 9a0:	0e 94 0b 06 	call	0xc16	; 0xc16 <test_write>
 9a4:	0e c0       	rjmp	.+28     	; 0x9c2 <cardScanInit+0x52>
 9a6:	80 59       	subi	r24, 0x90	; 144
 9a8:	82 30       	cpi	r24, 0x02	; 2
 9aa:	30 f4       	brcc	.+12     	; 0x9b8 <cardScanInit+0x48>
 9ac:	64 ef       	ldi	r22, 0xF4	; 244
 9ae:	74 e0       	ldi	r23, 0x04	; 4
 9b0:	80 e0       	ldi	r24, 0x00	; 0
 9b2:	0e 94 0b 06 	call	0xc16	; 0xc16 <test_write>
 9b6:	05 c0       	rjmp	.+10     	; 0x9c2 <cardScanInit+0x52>
 9b8:	6d ef       	ldi	r22, 0xFD	; 253
 9ba:	74 e0       	ldi	r23, 0x04	; 4
 9bc:	80 e0       	ldi	r24, 0x00	; 0
 9be:	0e 94 0b 06 	call	0xc16	; 0xc16 <test_write>
 9c2:	82 e0       	ldi	r24, 0x02	; 2
 9c4:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <mfrc522_read>
 9c8:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <byte>
 9cc:	68 2f       	mov	r22, r24
 9ce:	60 62       	ori	r22, 0x20	; 32
 9d0:	82 e0       	ldi	r24, 0x02	; 2
 9d2:	0e 94 24 06 	call	0xc48	; 0xc48 <mfrc522_write>
 9d6:	83 e0       	ldi	r24, 0x03	; 3
 9d8:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <mfrc522_read>
 9dc:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <byte>
 9e0:	68 2f       	mov	r22, r24
 9e2:	60 68       	ori	r22, 0x80	; 128
 9e4:	83 e0       	ldi	r24, 0x03	; 3
 9e6:	0e 94 24 06 	call	0xc48	; 0xc48 <mfrc522_write>
 9ea:	08 95       	ret

Disassembly of section .text.convertSerialN:

00000b64 <convertSerialN>:
 b64:	cf 92       	push	r12
 b66:	df 92       	push	r13
 b68:	ef 92       	push	r14
 b6a:	ff 92       	push	r15
 b6c:	dc 01       	movw	r26, r24
 b6e:	20 e0       	ldi	r18, 0x00	; 0
 b70:	30 e0       	ldi	r19, 0x00	; 0
 b72:	60 e0       	ldi	r22, 0x00	; 0
 b74:	70 e0       	ldi	r23, 0x00	; 0
 b76:	cb 01       	movw	r24, r22
 b78:	0e c0       	rjmp	.+28     	; 0xb96 <convertSerialN+0x32>
 b7a:	cc 24       	eor	r12, r12
 b7c:	d6 2e       	mov	r13, r22
 b7e:	e7 2e       	mov	r14, r23
 b80:	f8 2e       	mov	r15, r24
 b82:	fd 01       	movw	r30, r26
 b84:	e2 0f       	add	r30, r18
 b86:	f3 1f       	adc	r31, r19
 b88:	40 81       	ld	r20, Z
 b8a:	c7 01       	movw	r24, r14
 b8c:	b6 01       	movw	r22, r12
 b8e:	64 2b       	or	r22, r20
 b90:	10 82       	st	Z, r1
 b92:	2f 5f       	subi	r18, 0xFF	; 255
 b94:	3f 4f       	sbci	r19, 0xFF	; 255
 b96:	24 30       	cpi	r18, 0x04	; 4
 b98:	31 05       	cpc	r19, r1
 b9a:	7c f3       	brlt	.-34     	; 0xb7a <convertSerialN+0x16>
 b9c:	ff 90       	pop	r15
 b9e:	ef 90       	pop	r14
 ba0:	df 90       	pop	r13
 ba2:	cf 90       	pop	r12
 ba4:	08 95       	ret

Disassembly of section .text.readSerial:

00000d72 <readSerial>:
 d72:	88 e5       	ldi	r24, 0x58	; 88
 d74:	91 e0       	ldi	r25, 0x01	; 1
 d76:	0e 94 f6 04 	call	0x9ec	; 0x9ec <mfrc522_get_card_serial>
 d7a:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <byte>
 d7e:	81 30       	cpi	r24, 0x01	; 1
 d80:	19 f0       	breq	.+6      	; 0xd88 <readSerial+0x16>
 d82:	80 e0       	ldi	r24, 0x00	; 0
 d84:	90 e0       	ldi	r25, 0x00	; 0
 d86:	08 95       	ret
 d88:	81 e0       	ldi	r24, 0x01	; 1
 d8a:	90 e0       	ldi	r25, 0x00	; 0
 d8c:	08 95       	ret

Disassembly of section .text.scanCard:

00000bde <scanCard>:
 bde:	68 e5       	ldi	r22, 0x58	; 88
 be0:	71 e0       	ldi	r23, 0x01	; 1
 be2:	82 e5       	ldi	r24, 0x52	; 82
 be4:	0e 94 32 05 	call	0xa64	; 0xa64 <mfrc522_request>
 be8:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <byte>
 bec:	81 30       	cpi	r24, 0x01	; 1
 bee:	29 f0       	breq	.+10     	; 0xbfa <scanCard+0x1c>
 bf0:	8a e0       	ldi	r24, 0x0A	; 10
 bf2:	90 e0       	ldi	r25, 0x00	; 0
 bf4:	0e 94 9b 06 	call	0xd36	; 0xd36 <wait>
 bf8:	f2 cf       	rjmp	.-28     	; 0xbde <scanCard>
 bfa:	0e 94 b9 06 	call	0xd72	; 0xd72 <readSerial>
 bfe:	89 2b       	or	r24, r25
 c00:	29 f0       	breq	.+10     	; 0xc0c <scanCard+0x2e>
 c02:	88 e5       	ldi	r24, 0x58	; 88
 c04:	91 e0       	ldi	r25, 0x01	; 1
 c06:	0e 94 b2 05 	call	0xb64	; 0xb64 <convertSerialN>
 c0a:	08 95       	ret
 c0c:	8a e0       	ldi	r24, 0x0A	; 10
 c0e:	90 e0       	ldi	r25, 0x00	; 0
 c10:	0e 94 9b 06 	call	0xd36	; 0xd36 <wait>
 c14:	e4 cf       	rjmp	.-56     	; 0xbde <scanCard>

Disassembly of section .text.main:

00000746 <main>:
 746:	0e 94 6d 04 	call	0x8da	; 0x8da <lcd_init>
 74a:	8a e0       	ldi	r24, 0x0A	; 10
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	0e 94 9b 06 	call	0xd36	; 0xd36 <wait>
 752:	0e 94 b8 04 	call	0x970	; 0x970 <cardScanInit>
 756:	8a e0       	ldi	r24, 0x0A	; 10
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	0e 94 9b 06 	call	0xd36	; 0xd36 <wait>
 75e:	66 e0       	ldi	r22, 0x06	; 6
 760:	75 e0       	ldi	r23, 0x05	; 5
 762:	80 e0       	ldi	r24, 0x00	; 0
 764:	0e 94 0b 06 	call	0xc16	; 0xc16 <test_write>
 768:	0e 94 23 07 	call	0xe46	; 0xe46 <displayInit>
 76c:	84 ef       	ldi	r24, 0xF4	; 244
 76e:	91 e0       	ldi	r25, 0x01	; 1
 770:	0e 94 9b 06 	call	0xd36	; 0xd36 <wait>
 774:	40 e0       	ldi	r20, 0x00	; 0
 776:	60 e0       	ldi	r22, 0x00	; 0
 778:	81 e3       	ldi	r24, 0x31	; 49
 77a:	0e 94 d3 05 	call	0xba6	; 0xba6 <displayChar>
 77e:	8a e0       	ldi	r24, 0x0A	; 10
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	0e 94 9b 06 	call	0xd36	; 0xd36 <wait>
 786:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <_end>
 78a:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <_end+0x1>
 78e:	a0 91 6a 01 	lds	r26, 0x016A	; 0x80016a <_end+0x2>
 792:	b0 91 6b 01 	lds	r27, 0x016B	; 0x80016b <_end+0x3>
 796:	89 2b       	or	r24, r25
 798:	8a 2b       	or	r24, r26
 79a:	8b 2b       	or	r24, r27
 79c:	01 f5       	brne	.+64     	; 0x7de <main+0x98>
 79e:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <userPrompted>
 7a2:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <userPrompted+0x1>
 7a6:	89 2b       	or	r24, r25
 7a8:	d1 f4       	brne	.+52     	; 0x7de <main+0x98>
 7aa:	81 e0       	ldi	r24, 0x01	; 1
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <userPrompted+0x1>
 7b2:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <userPrompted>
 7b6:	6f e0       	ldi	r22, 0x0F	; 15
 7b8:	75 e0       	ldi	r23, 0x05	; 5
 7ba:	80 e0       	ldi	r24, 0x00	; 0
 7bc:	0e 94 0b 06 	call	0xc16	; 0xc16 <test_write>
 7c0:	0e 94 ef 05 	call	0xbde	; 0xbde <scanCard>
 7c4:	60 93 68 01 	sts	0x0168, r22	; 0x800168 <_end>
 7c8:	70 93 69 01 	sts	0x0169, r23	; 0x800169 <_end+0x1>
 7cc:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <_end+0x2>
 7d0:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <_end+0x3>
 7d4:	6f e1       	ldi	r22, 0x1F	; 31
 7d6:	75 e0       	ldi	r23, 0x05	; 5
 7d8:	80 e0       	ldi	r24, 0x00	; 0
 7da:	0e 94 0b 06 	call	0xc16	; 0xc16 <test_write>
 7de:	6b e2       	ldi	r22, 0x2B	; 43
 7e0:	75 e0       	ldi	r23, 0x05	; 5
 7e2:	80 e0       	ldi	r24, 0x00	; 0
 7e4:	0e 94 0b 06 	call	0xc16	; 0xc16 <test_write>
 7e8:	40 e0       	ldi	r20, 0x00	; 0
 7ea:	60 e0       	ldi	r22, 0x00	; 0
 7ec:	8f e3       	ldi	r24, 0x3F	; 63
 7ee:	0e 94 d3 05 	call	0xba6	; 0xba6 <displayChar>
 7f2:	0e 94 ef 05 	call	0xbde	; 0xbde <scanCard>
 7f6:	00 91 68 01 	lds	r16, 0x0168	; 0x800168 <_end>
 7fa:	10 91 69 01 	lds	r17, 0x0169	; 0x800169 <_end+0x1>
 7fe:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <_end+0x2>
 802:	30 91 6b 01 	lds	r19, 0x016B	; 0x80016b <_end+0x3>
 806:	60 17       	cp	r22, r16
 808:	71 07       	cpc	r23, r17
 80a:	82 07       	cpc	r24, r18
 80c:	93 07       	cpc	r25, r19
 80e:	59 f0       	breq	.+22     	; 0x826 <main+0xe0>
 810:	67 e3       	ldi	r22, 0x37	; 55
 812:	75 e0       	ldi	r23, 0x05	; 5
 814:	80 e0       	ldi	r24, 0x00	; 0
 816:	0e 94 0b 06 	call	0xc16	; 0xc16 <test_write>
 81a:	40 e0       	ldi	r20, 0x00	; 0
 81c:	60 e0       	ldi	r22, 0x00	; 0
 81e:	88 e5       	ldi	r24, 0x58	; 88
 820:	0e 94 d3 05 	call	0xba6	; 0xba6 <displayChar>
 824:	ac cf       	rjmp	.-168    	; 0x77e <main+0x38>
 826:	63 e4       	ldi	r22, 0x43	; 67
 828:	75 e0       	ldi	r23, 0x05	; 5
 82a:	80 e0       	ldi	r24, 0x00	; 0
 82c:	0e 94 0b 06 	call	0xc16	; 0xc16 <test_write>
 830:	40 e0       	ldi	r20, 0x00	; 0
 832:	60 e0       	ldi	r22, 0x00	; 0
 834:	86 e5       	ldi	r24, 0x56	; 86
 836:	0e 94 d3 05 	call	0xba6	; 0xba6 <displayChar>
 83a:	88 ee       	ldi	r24, 0xE8	; 232
 83c:	93 e0       	ldi	r25, 0x03	; 3
 83e:	0e 94 9b 06 	call	0xd36	; 0xd36 <wait>
 842:	9d cf       	rjmp	.-198    	; 0x77e <main+0x38>

Disassembly of section .text.mfrc522_write:

00000c48 <mfrc522_write>:
 c48:	cf 93       	push	r28
 c4a:	c6 2f       	mov	r28, r22
 c4c:	98 b3       	in	r25, 0x18	; 24
 c4e:	9e 7f       	andi	r25, 0xFE	; 254
 c50:	98 bb       	out	0x18, r25	; 24
 c52:	90 e0       	ldi	r25, 0x00	; 0
 c54:	88 0f       	add	r24, r24
 c56:	99 1f       	adc	r25, r25
 c58:	8e 77       	andi	r24, 0x7E	; 126
 c5a:	0e 94 2e 07 	call	0xe5c	; 0xe5c <spi_transmit>
 c5e:	8c 2f       	mov	r24, r28
 c60:	0e 94 2e 07 	call	0xe5c	; 0xe5c <spi_transmit>
 c64:	88 b3       	in	r24, 0x18	; 24
 c66:	81 60       	ori	r24, 0x01	; 1
 c68:	88 bb       	out	0x18, r24	; 24
 c6a:	cf 91       	pop	r28
 c6c:	08 95       	ret

Disassembly of section .text.mfrc522_read:

00000cd8 <mfrc522_read>:
 cd8:	98 b3       	in	r25, 0x18	; 24
 cda:	9e 7f       	andi	r25, 0xFE	; 254
 cdc:	98 bb       	out	0x18, r25	; 24
 cde:	90 e0       	ldi	r25, 0x00	; 0
 ce0:	88 0f       	add	r24, r24
 ce2:	99 1f       	adc	r25, r25
 ce4:	8e 77       	andi	r24, 0x7E	; 126
 ce6:	80 68       	ori	r24, 0x80	; 128
 ce8:	0e 94 2e 07 	call	0xe5c	; 0xe5c <spi_transmit>
 cec:	80 e0       	ldi	r24, 0x00	; 0
 cee:	0e 94 2e 07 	call	0xe5c	; 0xe5c <spi_transmit>
 cf2:	98 b3       	in	r25, 0x18	; 24
 cf4:	91 60       	ori	r25, 0x01	; 1
 cf6:	98 bb       	out	0x18, r25	; 24
 cf8:	08 95       	ret

Disassembly of section .text.MFRC522_SetBitMask:

00000d8e <MFRC522_SetBitMask>:
 d8e:	cf 93       	push	r28
 d90:	df 93       	push	r29
 d92:	d8 2f       	mov	r29, r24
 d94:	c6 2f       	mov	r28, r22
 d96:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <mfrc522_read>
 d9a:	68 2f       	mov	r22, r24
 d9c:	6c 2b       	or	r22, r28
 d9e:	8d 2f       	mov	r24, r29
 da0:	0e 94 24 06 	call	0xc48	; 0xc48 <mfrc522_write>
 da4:	df 91       	pop	r29
 da6:	cf 91       	pop	r28
 da8:	08 95       	ret

Disassembly of section .text.MFRC522_ClearBitMask:

00000d18 <MFRC522_ClearBitMask>:
 d18:	cf 93       	push	r28
 d1a:	df 93       	push	r29
 d1c:	d8 2f       	mov	r29, r24
 d1e:	c6 2f       	mov	r28, r22
 d20:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <mfrc522_read>
 d24:	c0 95       	com	r28
 d26:	6c 2f       	mov	r22, r28
 d28:	68 23       	and	r22, r24
 d2a:	8d 2f       	mov	r24, r29
 d2c:	0e 94 24 06 	call	0xc48	; 0xc48 <mfrc522_write>
 d30:	df 91       	pop	r29
 d32:	cf 91       	pop	r28
 d34:	08 95       	ret

Disassembly of section .text.mfrc522_reset:

00000e52 <mfrc522_reset>:
 e52:	6f e0       	ldi	r22, 0x0F	; 15
 e54:	81 e0       	ldi	r24, 0x01	; 1
 e56:	0e 94 24 06 	call	0xc48	; 0xc48 <mfrc522_write>
 e5a:	08 95       	ret

Disassembly of section .text.mfrc522_init:

00000ace <mfrc522_init>:
 ace:	0e 94 29 07 	call	0xe52	; 0xe52 <mfrc522_reset>
 ad2:	6d e8       	ldi	r22, 0x8D	; 141
 ad4:	8a e2       	ldi	r24, 0x2A	; 42
 ad6:	0e 94 24 06 	call	0xc48	; 0xc48 <mfrc522_write>
 ada:	6e e3       	ldi	r22, 0x3E	; 62
 adc:	8b e2       	ldi	r24, 0x2B	; 43
 ade:	0e 94 24 06 	call	0xc48	; 0xc48 <mfrc522_write>
 ae2:	6e e1       	ldi	r22, 0x1E	; 30
 ae4:	8c e2       	ldi	r24, 0x2C	; 44
 ae6:	0e 94 24 06 	call	0xc48	; 0xc48 <mfrc522_write>
 aea:	60 e0       	ldi	r22, 0x00	; 0
 aec:	8d e2       	ldi	r24, 0x2D	; 45
 aee:	0e 94 24 06 	call	0xc48	; 0xc48 <mfrc522_write>
 af2:	60 e4       	ldi	r22, 0x40	; 64
 af4:	85 e1       	ldi	r24, 0x15	; 21
 af6:	0e 94 24 06 	call	0xc48	; 0xc48 <mfrc522_write>
 afa:	6d e3       	ldi	r22, 0x3D	; 61
 afc:	81 e1       	ldi	r24, 0x11	; 17
 afe:	0e 94 24 06 	call	0xc48	; 0xc48 <mfrc522_write>
 b02:	84 e1       	ldi	r24, 0x14	; 20
 b04:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <mfrc522_read>
 b08:	98 2f       	mov	r25, r24
 b0a:	93 70       	andi	r25, 0x03	; 3
 b0c:	29 f4       	brne	.+10     	; 0xb18 <mfrc522_init+0x4a>
 b0e:	68 2f       	mov	r22, r24
 b10:	63 60       	ori	r22, 0x03	; 3
 b12:	84 e1       	ldi	r24, 0x14	; 20
 b14:	0e 94 24 06 	call	0xc48	; 0xc48 <mfrc522_write>
 b18:	08 95       	ret

Disassembly of section .text.mfrc522_to_card:

0000055e <mfrc522_to_card>:
 55e:	4f 92       	push	r4
 560:	5f 92       	push	r5
 562:	6f 92       	push	r6
 564:	7f 92       	push	r7
 566:	8f 92       	push	r8
 568:	9f 92       	push	r9
 56a:	af 92       	push	r10
 56c:	bf 92       	push	r11
 56e:	cf 92       	push	r12
 570:	df 92       	push	r13
 572:	ef 92       	push	r14
 574:	ff 92       	push	r15
 576:	0f 93       	push	r16
 578:	1f 93       	push	r17
 57a:	cf 93       	push	r28
 57c:	df 93       	push	r29
 57e:	d8 2f       	mov	r29, r24
 580:	7b 01       	movw	r14, r22
 582:	c4 2f       	mov	r28, r20
 584:	59 01       	movw	r10, r18
 586:	8c 30       	cpi	r24, 0x0C	; 12
 588:	29 f0       	breq	.+10     	; 0x594 <mfrc522_to_card+0x36>
 58a:	8e 30       	cpi	r24, 0x0E	; 14
 58c:	61 f0       	breq	.+24     	; 0x5a6 <mfrc522_to_card+0x48>
 58e:	91 2c       	mov	r9, r1
 590:	81 2c       	mov	r8, r1
 592:	10 c0       	rjmp	.+32     	; 0x5b4 <mfrc522_to_card+0x56>
 594:	0f 2e       	mov	r0, r31
 596:	f0 e3       	ldi	r31, 0x30	; 48
 598:	9f 2e       	mov	r9, r31
 59a:	f0 2d       	mov	r31, r0
 59c:	0f 2e       	mov	r0, r31
 59e:	f7 e7       	ldi	r31, 0x77	; 119
 5a0:	8f 2e       	mov	r8, r31
 5a2:	f0 2d       	mov	r31, r0
 5a4:	07 c0       	rjmp	.+14     	; 0x5b4 <mfrc522_to_card+0x56>
 5a6:	68 94       	set
 5a8:	99 24       	eor	r9, r9
 5aa:	94 f8       	bld	r9, 4
 5ac:	0f 2e       	mov	r0, r31
 5ae:	f2 e1       	ldi	r31, 0x12	; 18
 5b0:	8f 2e       	mov	r8, r31
 5b2:	f0 2d       	mov	r31, r0
 5b4:	68 2d       	mov	r22, r8
 5b6:	60 68       	ori	r22, 0x80	; 128
 5b8:	82 e0       	ldi	r24, 0x02	; 2
 5ba:	0e 94 24 06 	call	0xc48	; 0xc48 <mfrc522_write>
 5be:	60 e8       	ldi	r22, 0x80	; 128
 5c0:	84 e0       	ldi	r24, 0x04	; 4
 5c2:	0e 94 8c 06 	call	0xd18	; 0xd18 <MFRC522_ClearBitMask>
 5c6:	60 e8       	ldi	r22, 0x80	; 128
 5c8:	8a e0       	ldi	r24, 0x0A	; 10
 5ca:	0e 94 c7 06 	call	0xd8e	; 0xd8e <MFRC522_SetBitMask>
 5ce:	60 e0       	ldi	r22, 0x00	; 0
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	0e 94 24 06 	call	0xc48	; 0xc48 <mfrc522_write>
 5d6:	41 2c       	mov	r4, r1
 5d8:	51 2c       	mov	r5, r1
 5da:	32 01       	movw	r6, r4
 5dc:	0c c0       	rjmp	.+24     	; 0x5f6 <mfrc522_to_card+0x98>
 5de:	f7 01       	movw	r30, r14
 5e0:	e4 0d       	add	r30, r4
 5e2:	f5 1d       	adc	r31, r5
 5e4:	60 81       	ld	r22, Z
 5e6:	89 e0       	ldi	r24, 0x09	; 9
 5e8:	0e 94 24 06 	call	0xc48	; 0xc48 <mfrc522_write>
 5ec:	8f ef       	ldi	r24, 0xFF	; 255
 5ee:	48 1a       	sub	r4, r24
 5f0:	58 0a       	sbc	r5, r24
 5f2:	68 0a       	sbc	r6, r24
 5f4:	78 0a       	sbc	r7, r24
 5f6:	8c 2f       	mov	r24, r28
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	a0 e0       	ldi	r26, 0x00	; 0
 5fc:	b0 e0       	ldi	r27, 0x00	; 0
 5fe:	48 16       	cp	r4, r24
 600:	59 06       	cpc	r5, r25
 602:	6a 06       	cpc	r6, r26
 604:	7b 06       	cpc	r7, r27
 606:	58 f3       	brcs	.-42     	; 0x5de <mfrc522_to_card+0x80>
 608:	6d 2f       	mov	r22, r29
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	0e 94 24 06 	call	0xc48	; 0xc48 <mfrc522_write>
 610:	dc 30       	cpi	r29, 0x0C	; 12
 612:	21 f4       	brne	.+8      	; 0x61c <mfrc522_to_card+0xbe>
 614:	60 e8       	ldi	r22, 0x80	; 128
 616:	8d e0       	ldi	r24, 0x0D	; 13
 618:	0e 94 c7 06 	call	0xd8e	; 0xd8e <MFRC522_SetBitMask>
 61c:	0f 2e       	mov	r0, r31
 61e:	f0 ed       	ldi	r31, 0xD0	; 208
 620:	cf 2e       	mov	r12, r31
 622:	f7 e0       	ldi	r31, 0x07	; 7
 624:	df 2e       	mov	r13, r31
 626:	e1 2c       	mov	r14, r1
 628:	f1 2c       	mov	r15, r1
 62a:	f0 2d       	mov	r31, r0
 62c:	84 e0       	ldi	r24, 0x04	; 4
 62e:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <mfrc522_read>
 632:	c8 2f       	mov	r28, r24
 634:	e1 e0       	ldi	r30, 0x01	; 1
 636:	ce 1a       	sub	r12, r30
 638:	d1 08       	sbc	r13, r1
 63a:	e1 08       	sbc	r14, r1
 63c:	f1 08       	sbc	r15, r1
 63e:	29 f0       	breq	.+10     	; 0x64a <mfrc522_to_card+0xec>
 640:	80 fd       	sbrc	r24, 0
 642:	03 c0       	rjmp	.+6      	; 0x64a <mfrc522_to_card+0xec>
 644:	89 2d       	mov	r24, r9
 646:	8c 23       	and	r24, r28
 648:	89 f3       	breq	.-30     	; 0x62c <mfrc522_to_card+0xce>
 64a:	60 e8       	ldi	r22, 0x80	; 128
 64c:	8d e0       	ldi	r24, 0x0D	; 13
 64e:	0e 94 8c 06 	call	0xd18	; 0xd18 <MFRC522_ClearBitMask>
 652:	cd 28       	or	r12, r13
 654:	ce 28       	or	r12, r14
 656:	cf 28       	or	r12, r15
 658:	09 f4       	brne	.+2      	; 0x65c <mfrc522_to_card+0xfe>
 65a:	60 c0       	rjmp	.+192    	; 0x71c <mfrc522_to_card+0x1be>
 65c:	86 e0       	ldi	r24, 0x06	; 6
 65e:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <mfrc522_read>
 662:	8b 71       	andi	r24, 0x1B	; 27
 664:	09 f0       	breq	.+2      	; 0x668 <mfrc522_to_card+0x10a>
 666:	5c c0       	rjmp	.+184    	; 0x720 <mfrc522_to_card+0x1c2>
 668:	c8 21       	and	r28, r8
 66a:	c0 ff       	sbrs	r28, 0
 66c:	02 c0       	rjmp	.+4      	; 0x672 <mfrc522_to_card+0x114>
 66e:	c2 e0       	ldi	r28, 0x02	; 2
 670:	01 c0       	rjmp	.+2      	; 0x674 <mfrc522_to_card+0x116>
 672:	c1 e0       	ldi	r28, 0x01	; 1
 674:	dc 30       	cpi	r29, 0x0C	; 12
 676:	09 f0       	breq	.+2      	; 0x67a <mfrc522_to_card+0x11c>
 678:	54 c0       	rjmp	.+168    	; 0x722 <mfrc522_to_card+0x1c4>
 67a:	8a e0       	ldi	r24, 0x0A	; 10
 67c:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <mfrc522_read>
 680:	d8 2f       	mov	r29, r24
 682:	8c e0       	ldi	r24, 0x0C	; 12
 684:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <mfrc522_read>
 688:	28 2f       	mov	r18, r24
 68a:	27 70       	andi	r18, 0x07	; 7
 68c:	a9 f0       	breq	.+42     	; 0x6b8 <mfrc522_to_card+0x15a>
 68e:	8d 2f       	mov	r24, r29
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	01 97       	sbiw	r24, 0x01	; 1
 694:	88 0f       	add	r24, r24
 696:	99 1f       	adc	r25, r25
 698:	88 0f       	add	r24, r24
 69a:	99 1f       	adc	r25, r25
 69c:	88 0f       	add	r24, r24
 69e:	99 1f       	adc	r25, r25
 6a0:	82 0f       	add	r24, r18
 6a2:	91 1d       	adc	r25, r1
 6a4:	09 2e       	mov	r0, r25
 6a6:	00 0c       	add	r0, r0
 6a8:	aa 0b       	sbc	r26, r26
 6aa:	bb 0b       	sbc	r27, r27
 6ac:	f8 01       	movw	r30, r16
 6ae:	80 83       	st	Z, r24
 6b0:	91 83       	std	Z+1, r25	; 0x01
 6b2:	a2 83       	std	Z+2, r26	; 0x02
 6b4:	b3 83       	std	Z+3, r27	; 0x03
 6b6:	11 c0       	rjmp	.+34     	; 0x6da <mfrc522_to_card+0x17c>
 6b8:	8d 2f       	mov	r24, r29
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	88 0f       	add	r24, r24
 6be:	99 1f       	adc	r25, r25
 6c0:	88 0f       	add	r24, r24
 6c2:	99 1f       	adc	r25, r25
 6c4:	88 0f       	add	r24, r24
 6c6:	99 1f       	adc	r25, r25
 6c8:	09 2e       	mov	r0, r25
 6ca:	00 0c       	add	r0, r0
 6cc:	aa 0b       	sbc	r26, r26
 6ce:	bb 0b       	sbc	r27, r27
 6d0:	f8 01       	movw	r30, r16
 6d2:	80 83       	st	Z, r24
 6d4:	91 83       	std	Z+1, r25	; 0x01
 6d6:	a2 83       	std	Z+2, r26	; 0x02
 6d8:	b3 83       	std	Z+3, r27	; 0x03
 6da:	d1 11       	cpse	r29, r1
 6dc:	01 c0       	rjmp	.+2      	; 0x6e0 <mfrc522_to_card+0x182>
 6de:	d1 e0       	ldi	r29, 0x01	; 1
 6e0:	d1 31       	cpi	r29, 0x11	; 17
 6e2:	08 f0       	brcs	.+2      	; 0x6e6 <mfrc522_to_card+0x188>
 6e4:	d0 e1       	ldi	r29, 0x10	; 16
 6e6:	c1 2c       	mov	r12, r1
 6e8:	d1 2c       	mov	r13, r1
 6ea:	76 01       	movw	r14, r12
 6ec:	0d c0       	rjmp	.+26     	; 0x708 <mfrc522_to_card+0x1aa>
 6ee:	85 01       	movw	r16, r10
 6f0:	0c 0d       	add	r16, r12
 6f2:	1d 1d       	adc	r17, r13
 6f4:	89 e0       	ldi	r24, 0x09	; 9
 6f6:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <mfrc522_read>
 6fa:	f8 01       	movw	r30, r16
 6fc:	80 83       	st	Z, r24
 6fe:	ff ef       	ldi	r31, 0xFF	; 255
 700:	cf 1a       	sub	r12, r31
 702:	df 0a       	sbc	r13, r31
 704:	ef 0a       	sbc	r14, r31
 706:	ff 0a       	sbc	r15, r31
 708:	8d 2f       	mov	r24, r29
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	a0 e0       	ldi	r26, 0x00	; 0
 70e:	b0 e0       	ldi	r27, 0x00	; 0
 710:	c8 16       	cp	r12, r24
 712:	d9 06       	cpc	r13, r25
 714:	ea 06       	cpc	r14, r26
 716:	fb 06       	cpc	r15, r27
 718:	50 f3       	brcs	.-44     	; 0x6ee <mfrc522_to_card+0x190>
 71a:	03 c0       	rjmp	.+6      	; 0x722 <mfrc522_to_card+0x1c4>
 71c:	c3 e0       	ldi	r28, 0x03	; 3
 71e:	01 c0       	rjmp	.+2      	; 0x722 <mfrc522_to_card+0x1c4>
 720:	c3 e0       	ldi	r28, 0x03	; 3
 722:	8c 2f       	mov	r24, r28
 724:	df 91       	pop	r29
 726:	cf 91       	pop	r28
 728:	1f 91       	pop	r17
 72a:	0f 91       	pop	r16
 72c:	ff 90       	pop	r15
 72e:	ef 90       	pop	r14
 730:	df 90       	pop	r13
 732:	cf 90       	pop	r12
 734:	bf 90       	pop	r11
 736:	af 90       	pop	r10
 738:	9f 90       	pop	r9
 73a:	8f 90       	pop	r8
 73c:	7f 90       	pop	r7
 73e:	6f 90       	pop	r6
 740:	5f 90       	pop	r5
 742:	4f 90       	pop	r4
 744:	08 95       	ret

Disassembly of section .text.mfrc522_request:

00000a64 <mfrc522_request>:
 a64:	ef 92       	push	r14
 a66:	ff 92       	push	r15
 a68:	0f 93       	push	r16
 a6a:	1f 93       	push	r17
 a6c:	cf 93       	push	r28
 a6e:	df 93       	push	r29
 a70:	00 d0       	rcall	.+0      	; 0xa72 <mfrc522_request+0xe>
 a72:	00 d0       	rcall	.+0      	; 0xa74 <mfrc522_request+0x10>
 a74:	cd b7       	in	r28, 0x3d	; 61
 a76:	de b7       	in	r29, 0x3e	; 62
 a78:	18 2f       	mov	r17, r24
 a7a:	7b 01       	movw	r14, r22
 a7c:	67 e0       	ldi	r22, 0x07	; 7
 a7e:	8d e0       	ldi	r24, 0x0D	; 13
 a80:	0e 94 24 06 	call	0xc48	; 0xc48 <mfrc522_write>
 a84:	f7 01       	movw	r30, r14
 a86:	10 83       	st	Z, r17
 a88:	8e 01       	movw	r16, r28
 a8a:	0f 5f       	subi	r16, 0xFF	; 255
 a8c:	1f 4f       	sbci	r17, 0xFF	; 255
 a8e:	97 01       	movw	r18, r14
 a90:	41 e0       	ldi	r20, 0x01	; 1
 a92:	b7 01       	movw	r22, r14
 a94:	8c e0       	ldi	r24, 0x0C	; 12
 a96:	0e 94 af 02 	call	0x55e	; 0x55e <mfrc522_to_card>
 a9a:	81 30       	cpi	r24, 0x01	; 1
 a9c:	51 f4       	brne	.+20     	; 0xab2 <mfrc522_request+0x4e>
 a9e:	49 81       	ldd	r20, Y+1	; 0x01
 aa0:	5a 81       	ldd	r21, Y+2	; 0x02
 aa2:	6b 81       	ldd	r22, Y+3	; 0x03
 aa4:	7c 81       	ldd	r23, Y+4	; 0x04
 aa6:	40 31       	cpi	r20, 0x10	; 16
 aa8:	51 05       	cpc	r21, r1
 aaa:	61 05       	cpc	r22, r1
 aac:	71 05       	cpc	r23, r1
 aae:	19 f4       	brne	.+6      	; 0xab6 <mfrc522_request+0x52>
 ab0:	03 c0       	rjmp	.+6      	; 0xab8 <mfrc522_request+0x54>
 ab2:	83 e0       	ldi	r24, 0x03	; 3
 ab4:	01 c0       	rjmp	.+2      	; 0xab8 <mfrc522_request+0x54>
 ab6:	83 e0       	ldi	r24, 0x03	; 3
 ab8:	0f 90       	pop	r0
 aba:	0f 90       	pop	r0
 abc:	0f 90       	pop	r0
 abe:	0f 90       	pop	r0
 ac0:	df 91       	pop	r29
 ac2:	cf 91       	pop	r28
 ac4:	1f 91       	pop	r17
 ac6:	0f 91       	pop	r16
 ac8:	ff 90       	pop	r15
 aca:	ef 90       	pop	r14
 acc:	08 95       	ret

Disassembly of section .text.mfrc522_get_card_serial:

000009ec <mfrc522_get_card_serial>:
 9ec:	ef 92       	push	r14
 9ee:	ff 92       	push	r15
 9f0:	0f 93       	push	r16
 9f2:	1f 93       	push	r17
 9f4:	cf 93       	push	r28
 9f6:	df 93       	push	r29
 9f8:	00 d0       	rcall	.+0      	; 0x9fa <mfrc522_get_card_serial+0xe>
 9fa:	00 d0       	rcall	.+0      	; 0x9fc <mfrc522_get_card_serial+0x10>
 9fc:	cd b7       	in	r28, 0x3d	; 61
 9fe:	de b7       	in	r29, 0x3e	; 62
 a00:	7c 01       	movw	r14, r24
 a02:	60 e0       	ldi	r22, 0x00	; 0
 a04:	8d e0       	ldi	r24, 0x0D	; 13
 a06:	0e 94 24 06 	call	0xc48	; 0xc48 <mfrc522_write>
 a0a:	83 e9       	ldi	r24, 0x93	; 147
 a0c:	f7 01       	movw	r30, r14
 a0e:	80 83       	st	Z, r24
 a10:	80 e2       	ldi	r24, 0x20	; 32
 a12:	81 83       	std	Z+1, r24	; 0x01
 a14:	8e 01       	movw	r16, r28
 a16:	0f 5f       	subi	r16, 0xFF	; 255
 a18:	1f 4f       	sbci	r17, 0xFF	; 255
 a1a:	97 01       	movw	r18, r14
 a1c:	42 e0       	ldi	r20, 0x02	; 2
 a1e:	b7 01       	movw	r22, r14
 a20:	8c e0       	ldi	r24, 0x0C	; 12
 a22:	0e 94 af 02 	call	0x55e	; 0x55e <mfrc522_to_card>
 a26:	81 30       	cpi	r24, 0x01	; 1
 a28:	91 f4       	brne	.+36     	; 0xa4e <mfrc522_get_card_serial+0x62>
 a2a:	07 c0       	rjmp	.+14     	; 0xa3a <mfrc522_get_card_serial+0x4e>
 a2c:	f7 01       	movw	r30, r14
 a2e:	e9 0f       	add	r30, r25
 a30:	f1 1d       	adc	r31, r1
 a32:	30 81       	ld	r19, Z
 a34:	23 27       	eor	r18, r19
 a36:	9f 5f       	subi	r25, 0xFF	; 255
 a38:	02 c0       	rjmp	.+4      	; 0xa3e <mfrc522_get_card_serial+0x52>
 a3a:	20 e0       	ldi	r18, 0x00	; 0
 a3c:	90 e0       	ldi	r25, 0x00	; 0
 a3e:	94 30       	cpi	r25, 0x04	; 4
 a40:	a8 f3       	brcs	.-22     	; 0xa2c <mfrc522_get_card_serial+0x40>
 a42:	f7 01       	movw	r30, r14
 a44:	e9 0f       	add	r30, r25
 a46:	f1 1d       	adc	r31, r1
 a48:	90 81       	ld	r25, Z
 a4a:	29 13       	cpse	r18, r25
 a4c:	83 e0       	ldi	r24, 0x03	; 3
 a4e:	0f 90       	pop	r0
 a50:	0f 90       	pop	r0
 a52:	0f 90       	pop	r0
 a54:	0f 90       	pop	r0
 a56:	df 91       	pop	r29
 a58:	cf 91       	pop	r28
 a5a:	1f 91       	pop	r17
 a5c:	0f 91       	pop	r16
 a5e:	ff 90       	pop	r15
 a60:	ef 90       	pop	r14
 a62:	08 95       	ret

Disassembly of section .text.spi_masterInit:

00000e1e <spi_masterInit>:
 e1e:	87 b3       	in	r24, 0x17	; 23
 e20:	87 60       	ori	r24, 0x07	; 7
 e22:	87 bb       	out	0x17, r24	; 23
 e24:	8d b1       	in	r24, 0x0d	; 13
 e26:	81 65       	ori	r24, 0x51	; 81
 e28:	8d b9       	out	0x0d, r24	; 13
 e2a:	08 95       	ret

Disassembly of section .text.spi_transmit:

00000e5c <spi_transmit>:
 e5c:	8f b9       	out	0x0f, r24	; 15
 e5e:	77 9b       	sbis	0x0e, 7	; 14
 e60:	fe cf       	rjmp	.-4      	; 0xe5e <spi_transmit+0x2>
 e62:	8f b1       	in	r24, 0x0f	; 15
 e64:	08 95       	ret

Disassembly of section .text.wait:

00000d36 <wait>:
 d36:	20 e0       	ldi	r18, 0x00	; 0
 d38:	30 e0       	ldi	r19, 0x00	; 0
 d3a:	08 c0       	rjmp	.+16     	; 0xd4c <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 d3c:	ef ec       	ldi	r30, 0xCF	; 207
 d3e:	f7 e0       	ldi	r31, 0x07	; 7
 d40:	31 97       	sbiw	r30, 0x01	; 1
 d42:	f1 f7       	brne	.-4      	; 0xd40 <wait+0xa>
 d44:	00 c0       	rjmp	.+0      	; 0xd46 <wait+0x10>
 d46:	00 00       	nop
 d48:	2f 5f       	subi	r18, 0xFF	; 255
 d4a:	3f 4f       	sbci	r19, 0xFF	; 255
 d4c:	28 17       	cp	r18, r24
 d4e:	39 07       	cpc	r19, r25
 d50:	ac f3       	brlt	.-22     	; 0xd3c <wait+0x6>
 d52:	08 95       	ret

Disassembly of section .text.libgcc:

00000daa <__movmemx_qi>:
 daa:	99 27       	eor	r25, r25

00000dac <__movmemx_hi>:
 dac:	77 fd       	sbrc	r23, 7
 dae:	06 c0       	rjmp	.+12     	; 0xdbc <__movmemx_hi+0x10>
 db0:	7b bf       	out	0x3b, r23	; 59
 db2:	07 90       	elpm	r0, Z+
 db4:	0d 92       	st	X+, r0
 db6:	01 97       	sbiw	r24, 0x01	; 1
 db8:	e1 f7       	brne	.-8      	; 0xdb2 <__movmemx_hi+0x6>
 dba:	08 95       	ret
 dbc:	01 90       	ld	r0, Z+
 dbe:	0d 92       	st	X+, r0
 dc0:	01 97       	sbiw	r24, 0x01	; 1
 dc2:	e1 f7       	brne	.-8      	; 0xdbc <__movmemx_hi+0x10>
 dc4:	08 95       	ret

Disassembly of section .text.avrlibc:

00000d54 <strcpy>:
 d54:	9a 01       	movw	r18, r20
 d56:	46 2f       	mov	r20, r22
 d58:	dc 01       	movw	r26, r24
 d5a:	f9 01       	movw	r30, r18
 d5c:	54 2f       	mov	r21, r20
 d5e:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xload_1>
 d62:	6d 93       	st	X+, r22
 d64:	66 23       	and	r22, r22
 d66:	21 f0       	breq	.+8      	; 0xd70 <strcpy+0x1c>
 d68:	2f 5f       	subi	r18, 0xFF	; 255
 d6a:	3f 4f       	sbci	r19, 0xFF	; 255
 d6c:	4f 4f       	sbci	r20, 0xFF	; 255
 d6e:	f5 cf       	rjmp	.-22     	; 0xd5a <strcpy+0x6>
 d70:	08 95       	ret

Disassembly of section .text.libgcc:

00000e2c <__xload_1>:
 e2c:	57 fd       	sbrc	r21, 7
 e2e:	03 c0       	rjmp	.+6      	; 0xe36 <__xload_1+0xa>
 e30:	5b bf       	out	0x3b, r21	; 59
 e32:	67 91       	elpm	r22, Z+
 e34:	08 95       	ret
 e36:	60 81       	ld	r22, Z
 e38:	08 95       	ret
