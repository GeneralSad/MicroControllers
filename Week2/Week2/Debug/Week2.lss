
Week2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000190  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000038  00000000  00000000  000001bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b05  00000000  00000000  000001f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000830  00000000  00000000  00000cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002e3  00000000  00000000  0000152c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000074  00000000  00000000  00001810  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  00001884  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000e2  00000000  00000000  00001b01  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  00001be3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000138  00000138  0000018c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001c0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.wait    0000001e  0000011a  0000011a  0000016e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.__vector_2 00000024  000000d2  000000d2  00000126  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_3 00000024  000000f6  000000f6  0000014a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    0000002e  000000a4  000000a4  000000f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
   8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__vector_2>
   c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__vector_3>
  10:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  14:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  18:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  1c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  20:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  24:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  28:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  2c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  30:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  34:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  38:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  3c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  40:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  44:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  48:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  4c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  50:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  54:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  58:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  5c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  60:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  64:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  68:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  6c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  70:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  74:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  78:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  7c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  80:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  84:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  88:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 52 00 	call	0xa4	; 0xa4 <_etext>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

00000138 <__bad_interrupt>:
 138:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.wait:

0000011a <wait>:
				clock value is set. This is used by _delay_ms inside
				util/delay.h
Version :    	DMK, Initial code
*******************************************************************/
void wait( int ms ) {
	for (int i=0; i<ms; i++) {
 11a:	20 e0       	ldi	r18, 0x00	; 0
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	08 c0       	rjmp	.+16     	; 0x130 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	ef ec       	ldi	r30, 0xCF	; 207
 122:	f7 e0       	ldi	r31, 0x07	; 7
 124:	31 97       	sbiw	r30, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <wait+0xa>
 128:	00 c0       	rjmp	.+0      	; 0x12a <wait+0x10>
 12a:	00 00       	nop
 12c:	2f 5f       	subi	r18, 0xFF	; 255
 12e:	3f 4f       	sbci	r19, 0xFF	; 255
 130:	28 17       	cp	r18, r24
 132:	39 07       	cpc	r19, r25
 134:	ac f3       	brlt	.-22     	; 0x120 <wait+0x6>
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 136:	08 95       	ret

Disassembly of section .text.__vector_2:

000000d2 <__vector_2>:
inputs:
outputs:
notes:			Set PORTD.5
Version :    	DMK, Initial code
*******************************************************************/
ISR( INT1_vect ) {
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	8f 93       	push	r24
	if (PINE != 0b10000000)
  de:	81 b1       	in	r24, 0x01	; 1
  e0:	80 38       	cpi	r24, 0x80	; 128
  e2:	19 f0       	breq	.+6      	; 0xea <__vector_2+0x18>
	{
		PORTE = PINE<<1;
  e4:	81 b1       	in	r24, 0x01	; 1
  e6:	88 0f       	add	r24, r24
  e8:	83 b9       	out	0x03, r24	; 3
	}		
}
  ea:	8f 91       	pop	r24
  ec:	0f 90       	pop	r0
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	0f 90       	pop	r0
  f2:	1f 90       	pop	r1
  f4:	18 95       	reti

Disassembly of section .text.__vector_3:

000000f6 <__vector_3>:
inputs:
outputs:
notes:			Clear PORTD.5
Version :    	DMK, Initial code
*******************************************************************/
ISR( INT2_vect ) {
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	8f 93       	push	r24
    if (PINE != 0b00000001)
 102:	81 b1       	in	r24, 0x01	; 1
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	19 f0       	breq	.+6      	; 0x10e <__vector_3+0x18>
    {
	    PORTE = PINE>>1;
 108:	81 b1       	in	r24, 0x01	; 1
 10a:	86 95       	lsr	r24
 10c:	83 b9       	out	0x03, r24	; 3
    }		
}
 10e:	8f 91       	pop	r24
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

Disassembly of section .text.main:

000000a4 <main>:
notes:			Slow background task after init ISR
Version :    	DMK, Initial code
*******************************************************************/
int main( void ) {
	// Init I/O
	DDRD = 0xF0;			// PORTD(7:4) output, PORTD(3:0) input	
  a4:	80 ef       	ldi	r24, 0xF0	; 240
  a6:	81 bb       	out	0x11, r24	; 17
	DDRE = 0xFF;
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	82 b9       	out	0x02, r24	; 2
	PORTE = 0b00000001;
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	83 b9       	out	0x03, r24	; 3

	// Init Interrupt hardware
	EICRA |= 0b00111100;			// INT1 falling edge, INT0 rising edge
  b0:	ea e6       	ldi	r30, 0x6A	; 106
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	8c 63       	ori	r24, 0x3C	; 60
  b8:	80 83       	st	Z, r24
	EIMSK |= 0x06;			// Enable INT1 & INT0
  ba:	89 b7       	in	r24, 0x39	; 57
  bc:	86 60       	ori	r24, 0x06	; 6
  be:	89 bf       	out	0x39, r24	; 57
	
	// Enable global interrupt system
	//SREG = 0x80;			// Of direct via SREG of via wrapper
	sei();				
  c0:	78 94       	sei

	while (1) {
		PORTD ^= (1<<7);	// Toggle PORTD.7
  c2:	82 b3       	in	r24, 0x12	; 18
  c4:	80 58       	subi	r24, 0x80	; 128
  c6:	82 bb       	out	0x12, r24	; 18
		wait( 500 );								
  c8:	84 ef       	ldi	r24, 0xF4	; 244
  ca:	91 e0       	ldi	r25, 0x01	; 1
  cc:	0e 94 8d 00 	call	0x11a	; 0x11a <wait>
  d0:	f8 cf       	rjmp	.-16     	; 0xc2 <main+0x1e>
