
Week2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000024a  000002de  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000002de  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000050  00000000  00000000  0000030d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000cf4  00000000  00000000  0000035d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000008b3  00000000  00000000  00001051  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003f7  00000000  00000000  00001904  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000ac  00000000  00000000  00001cfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  00001da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000169  00000000  00000000  00002025  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  0000218e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000001ca  000001ca  0000025e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000021d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.wait    0000001e  00000192  00000192  00000226  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.display 0000001a  000001b0  000001b0  00000244  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_3 00000028  00000142  00000142  000001d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_2 00000028  0000016a  0000016a  000001fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.main    00000052  000000f0  000000f0  00000184  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .bss.button2  00000002  0080017c  0080017c  000002de  2**0
                  ALLOC
 19 .bss.button1  00000002  0080017e  0080017e  000002de  2**0
                  ALLOC
 20 .bss.number   00000002  00800180  00800180  000002de  2**0
                  ALLOC
 21 .data.pattern2 0000006c  00800100  000001ce  00000262  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 22 .data.pattern 00000010  0080016c  0000023a  000002ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
   8:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__vector_2>
   c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__vector_3>
  10:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  14:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  18:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  1c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  20:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  24:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  28:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  2c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  30:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  34:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  38:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  3c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  40:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  44:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  48:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  4c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  50:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  54:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  58:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  5c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  60:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  64:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  68:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  6c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  70:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  74:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  78:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  7c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  80:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  84:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  88:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 7c       	andi	r16, 0xC1	; 193
  90:	00 01       	movw	r0, r0
  92:	ce 01       	movw	r24, r28
  94:	7c 01       	movw	r14, r24
  96:	82 80       	ldd	r8, Z+2	; 0x02

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e1       	ldi	r29, 0x10	; 16
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	ec e8       	ldi	r30, 0x8C	; 140
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	19 c0       	rjmp	.+50     	; 0xde <__do_clear_bss+0x8>
  ac:	b7 91       	elpm	r27, Z+
  ae:	a7 91       	elpm	r26, Z+
  b0:	37 91       	elpm	r19, Z+
  b2:	27 91       	elpm	r18, Z+
  b4:	07 91       	elpm	r16, Z+
  b6:	07 fd       	sbrc	r16, 7
  b8:	0e c0       	rjmp	.+28     	; 0xd6 <__do_clear_bss>
  ba:	97 91       	elpm	r25, Z+
  bc:	87 91       	elpm	r24, Z+
  be:	ef 01       	movw	r28, r30
  c0:	f9 2f       	mov	r31, r25
  c2:	e8 2f       	mov	r30, r24
  c4:	0b bf       	out	0x3b, r16	; 59
  c6:	07 90       	elpm	r0, Z+
  c8:	0d 92       	st	X+, r0
  ca:	a2 17       	cp	r26, r18
  cc:	b3 07       	cpc	r27, r19
  ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0x22>
  d0:	fe 01       	movw	r30, r28
  d2:	1b be       	out	0x3b, r1	; 59
  d4:	04 c0       	rjmp	.+8      	; 0xde <__do_clear_bss+0x8>

000000d6 <__do_clear_bss>:
  d6:	1d 92       	st	X+, r1
  d8:	a2 17       	cp	r26, r18
  da:	b3 07       	cpc	r27, r19
  dc:	e1 f7       	brne	.-8      	; 0xd6 <__do_clear_bss>
  de:	e8 39       	cpi	r30, 0x98	; 152
  e0:	f4 07       	cpc	r31, r20
  e2:	21 f7       	brne	.-56     	; 0xac <__do_copy_data+0x8>
  e4:	0e 94 78 00 	call	0xf0	; 0xf0 <_etext>
  e8:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>

Disassembly of section .text:

000001ca <__bad_interrupt>:
 1ca:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.wait:

00000192 <wait>:
				clock value is set. This is used by _delay_ms inside
				util/delay.h
Version :    	DMK, Initial code
*******************************************************************/
void wait( int ms ) {
	for (int i=0; i<ms; i++) {
 192:	20 e0       	ldi	r18, 0x00	; 0
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	08 c0       	rjmp	.+16     	; 0x1a8 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 198:	ef ec       	ldi	r30, 0xCF	; 207
 19a:	f7 e0       	ldi	r31, 0x07	; 7
 19c:	31 97       	sbiw	r30, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <wait+0xa>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <wait+0x10>
 1a2:	00 00       	nop
 1a4:	2f 5f       	subi	r18, 0xFF	; 255
 1a6:	3f 4f       	sbci	r19, 0xFF	; 255
 1a8:	28 17       	cp	r18, r24
 1aa:	39 07       	cpc	r19, r25
 1ac:	ac f3       	brlt	.-22     	; 0x198 <wait+0x6>
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 1ae:	08 95       	ret

Disassembly of section .text.display:

000001b0 <display>:
	{0x0F, 200}, {0xF0, 200}, {0x0F, 200}, {0xF0, 200}, // half om half
	{0x00, 0x00}
};

void display(int digit) {
	if ((digit >= 0) && (digit <= 15)) {
 1b0:	80 31       	cpi	r24, 0x10	; 16
 1b2:	91 05       	cpc	r25, r1
 1b4:	30 f4       	brcc	.+12     	; 0x1c2 <display+0x12>
		PORTE = pattern[digit].data;
 1b6:	fc 01       	movw	r30, r24
 1b8:	e4 59       	subi	r30, 0x94	; 148
 1ba:	fe 4f       	sbci	r31, 0xFE	; 254
 1bc:	80 81       	ld	r24, Z
 1be:	83 b9       	out	0x03, r24	; 3
 1c0:	08 95       	ret
		} else {
		PORTE = pattern[14].data;
 1c2:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <pattern+0xe>
 1c6:	83 b9       	out	0x03, r24	; 3
 1c8:	08 95       	ret

Disassembly of section .text.__vector_3:

00000142 <__vector_3>:

unsigned int number = 0;
int button1 = 0;
int button2 = 0;

ISR( INT2_vect ) {
 142:	1f 92       	push	r1
 144:	0f 92       	push	r0
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	0f 92       	push	r0
 14a:	11 24       	eor	r1, r1
 14c:	8f 93       	push	r24
 14e:	9f 93       	push	r25
	button2 = 1;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <button2+0x1>
 158:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <button2>
}
 15c:	9f 91       	pop	r25
 15e:	8f 91       	pop	r24
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

Disassembly of section .text.__vector_2:

0000016a <__vector_2>:

ISR( INT1_vect ) {
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	8f 93       	push	r24
 176:	9f 93       	push	r25
	button1 = 1;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <button1+0x1>
 180:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <button1>
}
 184:	9f 91       	pop	r25
 186:	8f 91       	pop	r24
 188:	0f 90       	pop	r0
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	0f 90       	pop	r0
 18e:	1f 90       	pop	r1
 190:	18 95       	reti

Disassembly of section .text.main:

000000f0 <main>:



int main(void)
{
DDRE = 0xFF;
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	82 b9       	out	0x02, r24	; 2


while(1) {
	display(number);
  f4:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <number>
  f8:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <number+0x1>
  fc:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <display>
	
	int index = 0;
 100:	c0 e0       	ldi	r28, 0x00	; 0
 102:	d0 e0       	ldi	r29, 0x00	; 0
	while( pattern2[index].delay != 0 ) {
 104:	0e c0       	rjmp	.+28     	; 0x122 <main+0x32>
		// Write data to PORTD
		PORTE = pattern2[index].data;
 106:	fe 01       	movw	r30, r28
 108:	ee 0f       	add	r30, r30
 10a:	ff 1f       	adc	r31, r31
 10c:	ec 0f       	add	r30, r28
 10e:	fd 1f       	adc	r31, r29
 110:	e0 50       	subi	r30, 0x00	; 0
 112:	ff 4f       	sbci	r31, 0xFF	; 255
 114:	80 81       	ld	r24, Z
 116:	83 b9       	out	0x03, r24	; 3
		// wait
		wait(pattern2[index].delay);
 118:	81 81       	ldd	r24, Z+1	; 0x01
 11a:	92 81       	ldd	r25, Z+2	; 0x02
 11c:	0e 94 c9 00 	call	0x192	; 0x192 <wait>
		// increment for next round
		index++;
 120:	21 96       	adiw	r28, 0x01	; 1

while(1) {
	display(number);
	
	int index = 0;
	while( pattern2[index].delay != 0 ) {
 122:	fe 01       	movw	r30, r28
 124:	ee 0f       	add	r30, r30
 126:	ff 1f       	adc	r31, r31
 128:	ec 0f       	add	r30, r28
 12a:	fd 1f       	adc	r31, r29
 12c:	e0 50       	subi	r30, 0x00	; 0
 12e:	ff 4f       	sbci	r31, 0xFF	; 255
 130:	81 81       	ldd	r24, Z+1	; 0x01
 132:	92 81       	ldd	r25, Z+2	; 0x02
 134:	89 2b       	or	r24, r25
 136:	39 f7       	brne	.-50     	; 0x106 <main+0x16>
		// wait
		wait(pattern2[index].delay);
		// increment for next round
		index++;
	}
	wait(1);
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 c9 00 	call	0x192	; 0x192 <wait>
}
 140:	d9 cf       	rjmp	.-78     	; 0xf4 <main+0x4>
